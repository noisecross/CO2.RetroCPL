// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  GIST11RW
// DateTime: 29/12/2017 11:44:04
// UserName: soporte0
// Input file <RetroCPLParser.y - 29/12/2017 11:43:56>

// options: conflicts no-lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CO2.RetroCPL.Commons;

namespace CO2.RetroCPL.FrontEnd
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,NUMBER_LITERAL=5,STRING_LITERAL=6,
    SIZEOF=7,LOBYTE=8,HIBYTE=9,PTR_OP=10,INC_OP=11,DEC_OP=12,
    LEFT_OP=13,RIGHT_OP=14,LE_OP=15,GE_OP=16,EQ_OP=17,NE_OP=18,
    AND_OP=19,OR_OP=20,MUL_ASSIGN=21,DIV_ASSIGN=22,MOD_ASSIGN=23,ADD_ASSIGN=24,
    SUB_ASSIGN=25,LEFT_ASSIGN=26,RIGHT_ASSIGN=27,AND_ASSIGN=28,LEFT_ARROW=29,XOR_ASSIGN=30,
    OR_ASSIGN=31,TYPE_NAME=32,C_SC=33,C_OK=34,C_CK=35,C_CM=36,
    C_DP=37,C_ES=38,C_OP=39,C_CP=40,C_OB=41,C_CB=42,
    C_P=43,C_A=44,C_EM=45,C_NS=46,C_MS=47,C_PS=48,
    C_AK=49,C_SS=50,C_PC=51,C_LT=52,C_GT=53,C_UA=54,
    C_PP=55,C_QM=56,TYPEDEF=57,EXTERN=58,STATIC=59,AUTO=60,
    REGISTER=61,BYTE=62,WORD=63,LONGWORD=64,SIGNED=65,UNSIGNED=66,
    CONST=67,VOLATILE=68,STRUCT=69,UNION=70,ENUM=71,ELLIPSIS=72,
    CASE=73,DEFAULT=74,INTERRUPT=75,IF=76,ELSE=77,SWITCH=78,
    WHILE=79,DO=80,FOR=81,GOTO=82,CONTINUE=83,BREAK=84,
    RETURN=85};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<SyntaxTreeNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public SyntaxTreeNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, SyntaxTreeNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<SyntaxTreeNode, LexLocation>
{
  // Verbatim content from RetroCPLParser.y - 29/12/2017 11:43:56
	//#define YYSTYPE object
	//SymbolTable symTable = SymbolTable.GetInstance;
	//public StatementList program = new StatementList();
  // End verbatim content from RetroCPLParser.y - 29/12/2017 11:43:56

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[154];
  private static State[] states = new State[266];
  private static string[] nonTerms = new string[] {
      "translation_unit", "$accept", "external_declaration", "declaration", "function_definition", 
      "error_end", "declaration_specifiers", "init_declarator_list", "direct_declarator", 
      "declaration_list", "compound_statement", "type_specifier", "type_qualifier", 
      "init_declarator", "parameter_list", "identifier_list", "constant_expression", 
      "statement_list", "initializer", "parameter_declaration", "conditional_expression", 
      "statement", "assignment_expression", "logical_or_expression", "expression", 
      "labeled_statement", "expression_statement", "selection_statement", "iteration_statement", 
      "jump_statement", "unary_expression", "assignment_operator", "logical_and_expression", 
      "postfix_expression", "unary_operator", "cast_expression", "inclusive_or_expression", 
      "primary_expression", "argument_expression_list", "exclusive_or_expression", 
      "and_expression", "equality_expression", "relational_expression", "shift_expression", 
      "additive_expression", "multiplicative_expression", };

  static Parser() {
    states[0] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,4,145,39,146,2,263},new int[]{-1,1,-3,265,-4,4,-7,5,-12,149,-13,151,-5,258,-9,259});
    states[1] = new State(new int[]{3,2,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,4,145,39,146,2,263},new int[]{-3,3,-4,4,-7,5,-12,149,-13,151,-5,258,-9,259});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{33,6,4,145,39,146},new int[]{-8,7,-9,166,-14,173});
    states[6] = new State(-7);
    states[7] = new State(new int[]{33,8,36,9});
    states[8] = new State(-8);
    states[9] = new State(new int[]{4,145,39,146},new int[]{-14,10,-9,11});
    states[10] = new State(-22);
    states[11] = new State(new int[]{39,12,41,19,38,163,33,-45,36,-45});
    states[12] = new State(new int[]{40,160,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,4,162},new int[]{-15,13,-16,156,-20,161,-7,17,-12,149,-13,151});
    states[13] = new State(new int[]{40,14,36,15});
    states[14] = new State(-25);
    states[15] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-20,16,-7,17,-12,149,-13,151});
    states[16] = new State(-48);
    states[17] = new State(new int[]{4,145,39,146,40,-56,36,-56},new int[]{-9,18});
    states[18] = new State(new int[]{39,12,41,19,40,-55,36,-55});
    states[19] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-17,20,-21,22,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[20] = new State(new int[]{42,21});
    states[21] = new State(-28);
    states[22] = new State(-51);
    states[23] = new State(new int[]{20,24,56,141,42,-57,36,-57,40,-57,37,-57,33,-57});
    states[24] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-33,25,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[25] = new State(new int[]{19,26,20,-69,56,-69,42,-69,36,-69,40,-69,37,-69,33,-69});
    states[26] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-37,27,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[27] = new State(new int[]{55,28,19,-109,20,-109,56,-109,42,-109,36,-109,40,-109,37,-109,33,-109});
    states[28] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-40,29,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[29] = new State(new int[]{54,30,55,-129,19,-129,20,-129,56,-129,42,-129,36,-129,40,-129,37,-129,33,-129});
    states[30] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-41,31,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[31] = new State(new int[]{44,32,54,-133,55,-133,19,-133,20,-133,56,-133,42,-133,36,-133,40,-133,37,-133,33,-133});
    states[32] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-42,33,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[33] = new State(new int[]{17,34,18,57,44,-135,54,-135,55,-135,19,-135,20,-135,56,-135,42,-135,36,-135,40,-135,37,-135,33,-135});
    states[34] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-43,35,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[35] = new State(new int[]{53,36,52,59,15,82,16,130,17,-137,18,-137,44,-137,54,-137,55,-137,19,-137,20,-137,56,-137,42,-137,36,-137,40,-137,37,-137,33,-137});
    states[36] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-44,37,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[37] = new State(new int[]{13,38,14,61,53,-140,52,-140,15,-140,16,-140,17,-140,18,-140,44,-140,54,-140,55,-140,19,-140,20,-140,56,-140,42,-140,36,-140,40,-140,37,-140,33,-140});
    states[38] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-45,39,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[39] = new State(new int[]{48,40,47,63,13,-145,14,-145,53,-145,52,-145,15,-145,16,-145,17,-145,18,-145,44,-145,54,-145,55,-145,19,-145,20,-145,56,-145,42,-145,36,-145,40,-145,37,-145,33,-145});
    states[40] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-46,41,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[41] = new State(new int[]{49,42,50,65,51,86,48,-148,47,-148,13,-148,14,-148,53,-148,52,-148,15,-148,16,-148,17,-148,18,-148,44,-148,54,-148,55,-148,19,-148,20,-148,56,-148,42,-148,36,-148,40,-148,37,-148,33,-148});
    states[42] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-36,43,-31,44,-34,45,-38,67,-35,90});
    states[43] = new State(-151);
    states[44] = new State(-122);
    states[45] = new State(new int[]{41,46,39,132,11,139,12,140,49,-89,50,-89,51,-89,48,-89,47,-89,13,-89,14,-89,53,-89,52,-89,15,-89,16,-89,17,-89,18,-89,44,-89,54,-89,55,-89,19,-89,20,-89,56,-89,42,-89,36,-89,40,-89,37,-89,33,-89,29,-89,38,-89,21,-89,22,-89,23,-89,24,-89,25,-89,26,-89,27,-89,28,-89,30,-89,31,-89});
    states[46] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,47,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[47] = new State(new int[]{42,48,36,49});
    states[48] = new State(-111);
    states[49] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-23,50,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[50] = new State(-71);
    states[51] = new State(-65);
    states[52] = new State(new int[]{19,26,20,-68,56,-68,42,-68,36,-68,40,-68,37,-68,33,-68});
    states[53] = new State(new int[]{55,28,19,-108,20,-108,56,-108,42,-108,36,-108,40,-108,37,-108,33,-108});
    states[54] = new State(new int[]{54,30,55,-128,19,-128,20,-128,56,-128,42,-128,36,-128,40,-128,37,-128,33,-128});
    states[55] = new State(new int[]{44,32,54,-132,55,-132,19,-132,20,-132,56,-132,42,-132,36,-132,40,-132,37,-132,33,-132});
    states[56] = new State(new int[]{17,34,18,57,44,-134,54,-134,55,-134,19,-134,20,-134,56,-134,42,-134,36,-134,40,-134,37,-134,33,-134});
    states[57] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-43,58,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[58] = new State(new int[]{53,36,52,59,15,82,16,130,17,-138,18,-138,44,-138,54,-138,55,-138,19,-138,20,-138,56,-138,42,-138,36,-138,40,-138,37,-138,33,-138});
    states[59] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-44,60,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[60] = new State(new int[]{13,38,14,61,53,-141,52,-141,15,-141,16,-141,17,-141,18,-141,44,-141,54,-141,55,-141,19,-141,20,-141,56,-141,42,-141,36,-141,40,-141,37,-141,33,-141});
    states[61] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-45,62,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[62] = new State(new int[]{48,40,47,63,13,-146,14,-146,53,-146,52,-146,15,-146,16,-146,17,-146,18,-146,44,-146,54,-146,55,-146,19,-146,20,-146,56,-146,42,-146,36,-146,40,-146,37,-146,33,-146});
    states[63] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-46,64,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[64] = new State(new int[]{49,42,50,65,51,86,48,-149,47,-149,13,-149,14,-149,53,-149,52,-149,15,-149,16,-149,17,-149,18,-149,44,-149,54,-149,55,-149,19,-149,20,-149,56,-149,42,-149,36,-149,40,-149,37,-149,33,-149});
    states[65] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-36,66,-31,44,-34,45,-38,67,-35,90});
    states[66] = new State(-152);
    states[67] = new State(-110);
    states[68] = new State(-124);
    states[69] = new State(-125);
    states[70] = new State(-126);
    states[71] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,62,103,63,104,64,105,65,106,66,107},new int[]{-25,72,-12,74,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[72] = new State(new int[]{40,73,36,49});
    states[73] = new State(-127);
    states[74] = new State(new int[]{40,75});
    states[75] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-36,76,-31,44,-34,45,-38,67,-35,90});
    states[76] = new State(-123);
    states[77] = new State(new int[]{4,68,5,69,6,70,39,79,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-31,78,-34,45,-38,67,-35,90});
    states[78] = new State(-90);
    states[79] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,72,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[80] = new State(-70);
    states[81] = new State(new int[]{53,36,52,59,15,82,16,130,17,-136,18,-136,44,-136,54,-136,55,-136,19,-136,20,-136,56,-136,42,-136,36,-136,40,-136,37,-136,33,-136});
    states[82] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-44,83,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[83] = new State(new int[]{13,38,14,61,53,-142,52,-142,15,-142,16,-142,17,-142,18,-142,44,-142,54,-142,55,-142,19,-142,20,-142,56,-142,42,-142,36,-142,40,-142,37,-142,33,-142});
    states[84] = new State(new int[]{48,40,47,63,13,-144,14,-144,53,-144,52,-144,15,-144,16,-144,17,-144,18,-144,44,-144,54,-144,55,-144,19,-144,20,-144,56,-144,42,-144,36,-144,40,-144,37,-144,33,-144});
    states[85] = new State(new int[]{49,42,50,65,51,86,48,-147,47,-147,13,-147,14,-147,53,-147,52,-147,15,-147,16,-147,17,-147,18,-147,44,-147,54,-147,55,-147,19,-147,20,-147,56,-147,42,-147,36,-147,40,-147,37,-147,33,-147});
    states[86] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-36,87,-31,44,-34,45,-38,67,-35,90});
    states[87] = new State(-153);
    states[88] = new State(new int[]{4,68,5,69,6,70,39,79,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-31,89,-34,45,-38,67,-35,90});
    states[89] = new State(-91);
    states[90] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-36,91,-31,44,-34,45,-38,67,-35,90});
    states[91] = new State(-92);
    states[92] = new State(-116);
    states[93] = new State(-117);
    states[94] = new State(-118);
    states[95] = new State(-119);
    states[96] = new State(-120);
    states[97] = new State(-121);
    states[98] = new State(new int[]{39,100,4,68,5,69,6,70,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-31,99,-34,45,-38,67,-35,90});
    states[99] = new State(-93);
    states[100] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-12,101,-25,72,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[101] = new State(new int[]{40,102});
    states[102] = new State(-94);
    states[103] = new State(-37);
    states[104] = new State(-38);
    states[105] = new State(-39);
    states[106] = new State(-40);
    states[107] = new State(-41);
    states[108] = new State(new int[]{13,38,14,61,53,-139,52,-139,15,-139,16,-139,17,-139,18,-139,44,-139,54,-139,55,-139,19,-139,20,-139,56,-139,42,-139,36,-139,40,-139,37,-139,33,-139});
    states[109] = new State(-150);
    states[110] = new State(new int[]{29,117,38,119,21,120,22,121,23,122,24,123,25,124,26,125,27,126,28,127,30,128,31,129,49,-122,50,-122,51,-122,48,-122,47,-122,13,-122,14,-122,53,-122,52,-122,15,-122,16,-122,17,-122,18,-122,44,-122,54,-122,55,-122,19,-122,20,-122,56,-122,42,-122,36,-122,40,-122,37,-122,33,-122},new int[]{-32,111});
    states[111] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-23,112,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[112] = new State(-66);
    states[113] = new State(new int[]{4,68,5,69,6,70,39,79,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-31,114,-34,45,-38,67,-35,90});
    states[114] = new State(-95);
    states[115] = new State(new int[]{4,68,5,69,6,70,39,79,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-31,116,-34,45,-38,67,-35,90});
    states[116] = new State(-96);
    states[117] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-23,118,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[118] = new State(-67);
    states[119] = new State(-97);
    states[120] = new State(-98);
    states[121] = new State(-99);
    states[122] = new State(-100);
    states[123] = new State(-101);
    states[124] = new State(-102);
    states[125] = new State(-103);
    states[126] = new State(-104);
    states[127] = new State(-105);
    states[128] = new State(-106);
    states[129] = new State(-107);
    states[130] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-44,131,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[131] = new State(new int[]{13,38,14,61,53,-143,52,-143,15,-143,16,-143,17,-143,18,-143,44,-143,54,-143,55,-143,19,-143,20,-143,56,-143,42,-143,36,-143,40,-143,37,-143,33,-143});
    states[132] = new State(new int[]{40,133,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-39,134,-23,138,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[133] = new State(-112);
    states[134] = new State(new int[]{40,135,36,136});
    states[135] = new State(-113);
    states[136] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-23,137,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[137] = new State(-131);
    states[138] = new State(-130);
    states[139] = new State(-114);
    states[140] = new State(-115);
    states[141] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,142,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[142] = new State(new int[]{37,143,36,49});
    states[143] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-21,144,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[144] = new State(-58);
    states[145] = new State(-23);
    states[146] = new State(new int[]{4,145,39,146},new int[]{-9,147});
    states[147] = new State(new int[]{40,148,39,12,41,19});
    states[148] = new State(-24);
    states[149] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,33,-17,4,-17,39,-17,40,-17,36,-17},new int[]{-7,150,-12,149,-13,151});
    states[150] = new State(-18);
    states[151] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,33,-19,4,-19,39,-19,40,-19,36,-19},new int[]{-7,152,-12,149,-13,151});
    states[152] = new State(-20);
    states[153] = new State(-42);
    states[154] = new State(-43);
    states[155] = new State(-44);
    states[156] = new State(new int[]{40,157,36,158});
    states[157] = new State(-26);
    states[158] = new State(new int[]{4,159});
    states[159] = new State(-50);
    states[160] = new State(-27);
    states[161] = new State(-47);
    states[162] = new State(-49);
    states[163] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-19,164,-23,165,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[164] = new State(-46);
    states[165] = new State(-54);
    states[166] = new State(new int[]{39,12,41,19,38,163,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,2,257,34,174,33,-45,36,-45},new int[]{-10,167,-11,256,-4,255,-7,172,-12,149,-13,151});
    states[167] = new State(new int[]{2,170,34,174,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-11,168,-4,169,-7,172,-12,149,-13,151});
    states[168] = new State(-9);
    states[169] = new State(-30);
    states[170] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-4,171,-7,172,-12,149,-13,151});
    states[171] = new State(-32);
    states[172] = new State(new int[]{33,6,4,145,39,146},new int[]{-8,7,-14,173,-9,11});
    states[173] = new State(-21);
    states[174] = new State(new int[]{35,175,4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,253,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-18,176,-10,247,-22,252,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226,-4,255,-7,172,-12,149,-13,151});
    states[175] = new State(-33);
    states[176] = new State(new int[]{35,177,4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,178,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[177] = new State(-34);
    states[178] = new State(-53);
    states[179] = new State(-59);
    states[180] = new State(new int[]{37,181,41,-124,39,-124,11,-124,12,-124,29,-124,38,-124,21,-124,22,-124,23,-124,24,-124,25,-124,26,-124,27,-124,28,-124,30,-124,31,-124,49,-124,50,-124,51,-124,48,-124,47,-124,13,-124,14,-124,53,-124,52,-124,15,-124,16,-124,17,-124,18,-124,44,-124,54,-124,55,-124,19,-124,20,-124,56,-124,33,-124,36,-124});
    states[181] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,182,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[182] = new State(-72);
    states[183] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-17,184,-21,22,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,44,-34,45,-38,67,-35,90});
    states[184] = new State(new int[]{37,185});
    states[185] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,186,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[186] = new State(-73);
    states[187] = new State(new int[]{37,188});
    states[188] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,189,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[189] = new State(-74);
    states[190] = new State(-60);
    states[191] = new State(-75);
    states[192] = new State(new int[]{33,193,36,49});
    states[193] = new State(-76);
    states[194] = new State(-61);
    states[195] = new State(new int[]{39,196});
    states[196] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,197,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[197] = new State(new int[]{40,198,36,49});
    states[198] = new State(new int[]{34,174},new int[]{-11,199});
    states[199] = new State(new int[]{77,200,35,-77,4,-77,73,-77,74,-77,33,-77,5,-77,6,-77,39,-77,11,-77,12,-77,44,-77,49,-77,48,-77,47,-77,46,-77,45,-77,7,-77,8,-77,9,-77,76,-77,78,-77,79,-77,80,-77,81,-77,82,-77,83,-77,84,-77,85,-77,2,-77});
    states[200] = new State(new int[]{34,174},new int[]{-11,201});
    states[201] = new State(-78);
    states[202] = new State(new int[]{39,203});
    states[203] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,204,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[204] = new State(new int[]{40,205,36,49});
    states[205] = new State(new int[]{34,174},new int[]{-11,206});
    states[206] = new State(-79);
    states[207] = new State(-62);
    states[208] = new State(new int[]{39,209});
    states[209] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,210,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[210] = new State(new int[]{40,211,36,49});
    states[211] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,212,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[212] = new State(-80);
    states[213] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,214,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[214] = new State(new int[]{79,215});
    states[215] = new State(new int[]{39,216});
    states[216] = new State(new int[]{4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,217,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[217] = new State(new int[]{40,218,36,49});
    states[218] = new State(new int[]{33,219});
    states[219] = new State(-81);
    states[220] = new State(new int[]{39,221});
    states[221] = new State(new int[]{33,191,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-27,222,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[222] = new State(new int[]{33,191,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-27,223,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[223] = new State(new int[]{40,224,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,244,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[224] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,225,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[225] = new State(-82);
    states[226] = new State(-63);
    states[227] = new State(new int[]{4,228});
    states[228] = new State(new int[]{33,229});
    states[229] = new State(-84);
    states[230] = new State(new int[]{33,231});
    states[231] = new State(-85);
    states[232] = new State(new int[]{33,233});
    states[233] = new State(-86);
    states[234] = new State(new int[]{33,235,4,68,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115},new int[]{-25,236,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90});
    states[235] = new State(-87);
    states[236] = new State(new int[]{33,237,36,49});
    states[237] = new State(-88);
    states[238] = new State(new int[]{33,240,40,241,34,242,35,243},new int[]{-6,239});
    states[239] = new State(-64);
    states[240] = new State(-13);
    states[241] = new State(-14);
    states[242] = new State(-15);
    states[243] = new State(-16);
    states[244] = new State(new int[]{40,245,36,49});
    states[245] = new State(new int[]{4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,246,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[246] = new State(-83);
    states[247] = new State(new int[]{35,248,2,251,4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-18,249,-4,169,-22,252,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226,-7,172,-12,149,-13,151});
    states[248] = new State(-35);
    states[249] = new State(new int[]{35,250,4,180,73,183,74,187,33,191,5,69,6,70,39,71,11,77,12,88,44,92,49,93,48,94,47,95,46,96,45,97,7,98,8,113,9,115,76,195,78,202,79,208,80,213,81,220,82,227,83,230,84,232,85,234,2,238},new int[]{-22,178,-26,179,-27,190,-25,192,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,108,-45,84,-46,85,-36,109,-31,110,-34,45,-38,67,-35,90,-28,194,-29,207,-30,226});
    states[250] = new State(-36);
    states[251] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,33,240,40,241,34,242,35,243},new int[]{-4,171,-6,239,-7,172,-12,149,-13,151});
    states[252] = new State(-52);
    states[253] = new State(new int[]{33,240,40,241,34,242,35,243,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-6,239,-4,254,-7,172,-12,149,-13,151});
    states[254] = new State(-31);
    states[255] = new State(-29);
    states[256] = new State(-10);
    states[257] = new State(new int[]{62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-4,254,-7,172,-12,149,-13,151});
    states[258] = new State(-5);
    states[259] = new State(new int[]{39,12,41,19,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155,2,257,34,174},new int[]{-10,260,-11,262,-4,255,-7,172,-12,149,-13,151});
    states[260] = new State(new int[]{2,170,34,174,62,103,63,104,64,105,65,106,66,107,67,153,68,154,75,155},new int[]{-11,261,-4,169,-7,172,-12,149,-13,151});
    states[261] = new State(-11);
    states[262] = new State(-12);
    states[263] = new State(new int[]{33,240,40,241,34,242,35,243},new int[]{-6,264});
    states[264] = new State(-6);
    states[265] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{2,-6});
    rules[7] = new Rule(-4, new int[]{-7,33});
    rules[8] = new Rule(-4, new int[]{-7,-8,33});
    rules[9] = new Rule(-5, new int[]{-7,-9,-10,-11});
    rules[10] = new Rule(-5, new int[]{-7,-9,-11});
    rules[11] = new Rule(-5, new int[]{-9,-10,-11});
    rules[12] = new Rule(-5, new int[]{-9,-11});
    rules[13] = new Rule(-6, new int[]{33});
    rules[14] = new Rule(-6, new int[]{40});
    rules[15] = new Rule(-6, new int[]{34});
    rules[16] = new Rule(-6, new int[]{35});
    rules[17] = new Rule(-7, new int[]{-12});
    rules[18] = new Rule(-7, new int[]{-12,-7});
    rules[19] = new Rule(-7, new int[]{-13});
    rules[20] = new Rule(-7, new int[]{-13,-7});
    rules[21] = new Rule(-8, new int[]{-14});
    rules[22] = new Rule(-8, new int[]{-8,36,-14});
    rules[23] = new Rule(-9, new int[]{4});
    rules[24] = new Rule(-9, new int[]{39,-9,40});
    rules[25] = new Rule(-9, new int[]{-9,39,-15,40});
    rules[26] = new Rule(-9, new int[]{-9,39,-16,40});
    rules[27] = new Rule(-9, new int[]{-9,39,40});
    rules[28] = new Rule(-9, new int[]{-9,41,-17,42});
    rules[29] = new Rule(-10, new int[]{-4});
    rules[30] = new Rule(-10, new int[]{-10,-4});
    rules[31] = new Rule(-10, new int[]{2,-4});
    rules[32] = new Rule(-10, new int[]{-10,2,-4});
    rules[33] = new Rule(-11, new int[]{34,35});
    rules[34] = new Rule(-11, new int[]{34,-18,35});
    rules[35] = new Rule(-11, new int[]{34,-10,35});
    rules[36] = new Rule(-11, new int[]{34,-10,-18,35});
    rules[37] = new Rule(-12, new int[]{62});
    rules[38] = new Rule(-12, new int[]{63});
    rules[39] = new Rule(-12, new int[]{64});
    rules[40] = new Rule(-12, new int[]{65});
    rules[41] = new Rule(-12, new int[]{66});
    rules[42] = new Rule(-13, new int[]{67});
    rules[43] = new Rule(-13, new int[]{68});
    rules[44] = new Rule(-13, new int[]{75});
    rules[45] = new Rule(-14, new int[]{-9});
    rules[46] = new Rule(-14, new int[]{-9,38,-19});
    rules[47] = new Rule(-15, new int[]{-20});
    rules[48] = new Rule(-15, new int[]{-15,36,-20});
    rules[49] = new Rule(-16, new int[]{4});
    rules[50] = new Rule(-16, new int[]{-16,36,4});
    rules[51] = new Rule(-17, new int[]{-21});
    rules[52] = new Rule(-18, new int[]{-22});
    rules[53] = new Rule(-18, new int[]{-18,-22});
    rules[54] = new Rule(-19, new int[]{-23});
    rules[55] = new Rule(-20, new int[]{-7,-9});
    rules[56] = new Rule(-20, new int[]{-7});
    rules[57] = new Rule(-21, new int[]{-24});
    rules[58] = new Rule(-21, new int[]{-24,56,-25,37,-21});
    rules[59] = new Rule(-22, new int[]{-26});
    rules[60] = new Rule(-22, new int[]{-27});
    rules[61] = new Rule(-22, new int[]{-28});
    rules[62] = new Rule(-22, new int[]{-29});
    rules[63] = new Rule(-22, new int[]{-30});
    rules[64] = new Rule(-22, new int[]{2,-6});
    rules[65] = new Rule(-23, new int[]{-21});
    rules[66] = new Rule(-23, new int[]{-31,-32,-23});
    rules[67] = new Rule(-23, new int[]{-31,29,-23});
    rules[68] = new Rule(-24, new int[]{-33});
    rules[69] = new Rule(-24, new int[]{-24,20,-33});
    rules[70] = new Rule(-25, new int[]{-23});
    rules[71] = new Rule(-25, new int[]{-25,36,-23});
    rules[72] = new Rule(-26, new int[]{4,37,-22});
    rules[73] = new Rule(-26, new int[]{73,-17,37,-22});
    rules[74] = new Rule(-26, new int[]{74,37,-22});
    rules[75] = new Rule(-27, new int[]{33});
    rules[76] = new Rule(-27, new int[]{-25,33});
    rules[77] = new Rule(-28, new int[]{76,39,-25,40,-11});
    rules[78] = new Rule(-28, new int[]{76,39,-25,40,-11,77,-11});
    rules[79] = new Rule(-28, new int[]{78,39,-25,40,-11});
    rules[80] = new Rule(-29, new int[]{79,39,-25,40,-22});
    rules[81] = new Rule(-29, new int[]{80,-22,79,39,-25,40,33});
    rules[82] = new Rule(-29, new int[]{81,39,-27,-27,40,-22});
    rules[83] = new Rule(-29, new int[]{81,39,-27,-27,-25,40,-22});
    rules[84] = new Rule(-30, new int[]{82,4,33});
    rules[85] = new Rule(-30, new int[]{83,33});
    rules[86] = new Rule(-30, new int[]{84,33});
    rules[87] = new Rule(-30, new int[]{85,33});
    rules[88] = new Rule(-30, new int[]{85,-25,33});
    rules[89] = new Rule(-31, new int[]{-34});
    rules[90] = new Rule(-31, new int[]{11,-31});
    rules[91] = new Rule(-31, new int[]{12,-31});
    rules[92] = new Rule(-31, new int[]{-35,-36});
    rules[93] = new Rule(-31, new int[]{7,-31});
    rules[94] = new Rule(-31, new int[]{7,39,-12,40});
    rules[95] = new Rule(-31, new int[]{8,-31});
    rules[96] = new Rule(-31, new int[]{9,-31});
    rules[97] = new Rule(-32, new int[]{38});
    rules[98] = new Rule(-32, new int[]{21});
    rules[99] = new Rule(-32, new int[]{22});
    rules[100] = new Rule(-32, new int[]{23});
    rules[101] = new Rule(-32, new int[]{24});
    rules[102] = new Rule(-32, new int[]{25});
    rules[103] = new Rule(-32, new int[]{26});
    rules[104] = new Rule(-32, new int[]{27});
    rules[105] = new Rule(-32, new int[]{28});
    rules[106] = new Rule(-32, new int[]{30});
    rules[107] = new Rule(-32, new int[]{31});
    rules[108] = new Rule(-33, new int[]{-37});
    rules[109] = new Rule(-33, new int[]{-33,19,-37});
    rules[110] = new Rule(-34, new int[]{-38});
    rules[111] = new Rule(-34, new int[]{-34,41,-25,42});
    rules[112] = new Rule(-34, new int[]{-34,39,40});
    rules[113] = new Rule(-34, new int[]{-34,39,-39,40});
    rules[114] = new Rule(-34, new int[]{-34,11});
    rules[115] = new Rule(-34, new int[]{-34,12});
    rules[116] = new Rule(-35, new int[]{44});
    rules[117] = new Rule(-35, new int[]{49});
    rules[118] = new Rule(-35, new int[]{48});
    rules[119] = new Rule(-35, new int[]{47});
    rules[120] = new Rule(-35, new int[]{46});
    rules[121] = new Rule(-35, new int[]{45});
    rules[122] = new Rule(-36, new int[]{-31});
    rules[123] = new Rule(-36, new int[]{39,-12,40,-36});
    rules[124] = new Rule(-38, new int[]{4});
    rules[125] = new Rule(-38, new int[]{5});
    rules[126] = new Rule(-38, new int[]{6});
    rules[127] = new Rule(-38, new int[]{39,-25,40});
    rules[128] = new Rule(-37, new int[]{-40});
    rules[129] = new Rule(-37, new int[]{-37,55,-40});
    rules[130] = new Rule(-39, new int[]{-23});
    rules[131] = new Rule(-39, new int[]{-39,36,-23});
    rules[132] = new Rule(-40, new int[]{-41});
    rules[133] = new Rule(-40, new int[]{-40,54,-41});
    rules[134] = new Rule(-41, new int[]{-42});
    rules[135] = new Rule(-41, new int[]{-41,44,-42});
    rules[136] = new Rule(-42, new int[]{-43});
    rules[137] = new Rule(-42, new int[]{-42,17,-43});
    rules[138] = new Rule(-42, new int[]{-42,18,-43});
    rules[139] = new Rule(-43, new int[]{-44});
    rules[140] = new Rule(-43, new int[]{-43,53,-44});
    rules[141] = new Rule(-43, new int[]{-43,52,-44});
    rules[142] = new Rule(-43, new int[]{-43,15,-44});
    rules[143] = new Rule(-43, new int[]{-43,16,-44});
    rules[144] = new Rule(-44, new int[]{-45});
    rules[145] = new Rule(-44, new int[]{-44,13,-45});
    rules[146] = new Rule(-44, new int[]{-44,14,-45});
    rules[147] = new Rule(-45, new int[]{-46});
    rules[148] = new Rule(-45, new int[]{-45,48,-46});
    rules[149] = new Rule(-45, new int[]{-45,47,-46});
    rules[150] = new Rule(-46, new int[]{-36});
    rules[151] = new Rule(-46, new int[]{-46,49,-36});
    rules[152] = new Rule(-46, new int[]{-46,50,-36});
    rules[153] = new Rule(-46, new int[]{-46,51,-36});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // translation_unit -> external_declaration
{ }
        break;
      case 3: // translation_unit -> translation_unit, external_declaration
{ }
        break;
      case 4: // external_declaration -> declaration
{ }
        break;
      case 5: // external_declaration -> function_definition
{ }
        break;
      case 6: // external_declaration -> error, error_end
{ }
        break;
      case 7: // declaration -> declaration_specifiers, C_SC
{ }
        break;
      case 8: // declaration -> declaration_specifiers, init_declarator_list, C_SC
{ }
        break;
      case 9: // function_definition -> declaration_specifiers, direct_declarator, 
              //                        declaration_list, compound_statement
{ }
        break;
      case 10: // function_definition -> declaration_specifiers, direct_declarator, 
               //                        compound_statement
{ }
        break;
      case 11: // function_definition -> direct_declarator, declaration_list, compound_statement
{ }
        break;
      case 12: // function_definition -> direct_declarator, compound_statement
{ }
        break;
      case 13: // error_end -> C_SC
{ }
        break;
      case 14: // error_end -> C_CP
{ }
        break;
      case 15: // error_end -> C_OK
{ }
        break;
      case 16: // error_end -> C_CK
{ }
        break;
      case 17: // declaration_specifiers -> type_specifier
{ }
        break;
      case 18: // declaration_specifiers -> type_specifier, declaration_specifiers
{ }
        break;
      case 19: // declaration_specifiers -> type_qualifier
{ }
        break;
      case 20: // declaration_specifiers -> type_qualifier, declaration_specifiers
{ }
        break;
      case 21: // init_declarator_list -> init_declarator
{ }
        break;
      case 22: // init_declarator_list -> init_declarator_list, C_CM, init_declarator
{ }
        break;
      case 23: // direct_declarator -> IDENTIFIER
{ }
        break;
      case 24: // direct_declarator -> C_OP, direct_declarator, C_CP
{ }
        break;
      case 25: // direct_declarator -> direct_declarator, C_OP, parameter_list, C_CP
{ }
        break;
      case 26: // direct_declarator -> direct_declarator, C_OP, identifier_list, C_CP
{ }
        break;
      case 27: // direct_declarator -> direct_declarator, C_OP, C_CP
{ }
        break;
      case 28: // direct_declarator -> direct_declarator, C_OB, constant_expression, C_CB
{ }
        break;
      case 29: // declaration_list -> declaration
{ }
        break;
      case 30: // declaration_list -> declaration_list, declaration
{ }
        break;
      case 31: // declaration_list -> error, declaration
{ }
        break;
      case 32: // declaration_list -> declaration_list, error, declaration
{ }
        break;
      case 33: // compound_statement -> C_OK, C_CK
{ }
        break;
      case 34: // compound_statement -> C_OK, statement_list, C_CK
{ }
        break;
      case 35: // compound_statement -> C_OK, declaration_list, C_CK
{ }
        break;
      case 36: // compound_statement -> C_OK, declaration_list, statement_list, C_CK
{ }
        break;
      case 37: // type_specifier -> BYTE
{ }
        break;
      case 38: // type_specifier -> WORD
{ }
        break;
      case 39: // type_specifier -> LONGWORD
{ }
        break;
      case 40: // type_specifier -> SIGNED
{ }
        break;
      case 41: // type_specifier -> UNSIGNED
{ }
        break;
      case 42: // type_qualifier -> CONST
{ }
        break;
      case 43: // type_qualifier -> VOLATILE
{ }
        break;
      case 44: // type_qualifier -> INTERRUPT
{ }
        break;
      case 45: // init_declarator -> direct_declarator
{ }
        break;
      case 46: // init_declarator -> direct_declarator, C_ES, initializer
{ }
        break;
      case 47: // parameter_list -> parameter_declaration
{ }
        break;
      case 48: // parameter_list -> parameter_list, C_CM, parameter_declaration
{ }
        break;
      case 49: // identifier_list -> IDENTIFIER
{ }
        break;
      case 50: // identifier_list -> identifier_list, C_CM, IDENTIFIER
{ }
        break;
      case 51: // constant_expression -> conditional_expression
{ }
        break;
      case 52: // statement_list -> statement
{ }
        break;
      case 53: // statement_list -> statement_list, statement
{ }
        break;
      case 54: // initializer -> assignment_expression
{ }
        break;
      case 55: // parameter_declaration -> declaration_specifiers, direct_declarator
{ }
        break;
      case 56: // parameter_declaration -> declaration_specifiers
{ }
        break;
      case 57: // conditional_expression -> logical_or_expression
{ }
        break;
      case 58: // conditional_expression -> logical_or_expression, C_QM, expression, C_DP, 
               //                           conditional_expression
{ }
        break;
      case 59: // statement -> labeled_statement
{ }
        break;
      case 60: // statement -> expression_statement
{ }
        break;
      case 61: // statement -> selection_statement
{ }
        break;
      case 62: // statement -> iteration_statement
{ }
        break;
      case 63: // statement -> jump_statement
{ }
        break;
      case 64: // statement -> error, error_end
{ }
        break;
      case 65: // assignment_expression -> conditional_expression
{ }
        break;
      case 66: // assignment_expression -> unary_expression, assignment_operator, 
               //                          assignment_expression
{ }
        break;
      case 67: // assignment_expression -> unary_expression, LEFT_ARROW, assignment_expression
{ }
        break;
      case 68: // logical_or_expression -> logical_and_expression
{ }
        break;
      case 69: // logical_or_expression -> logical_or_expression, OR_OP, logical_and_expression
{ }
        break;
      case 70: // expression -> assignment_expression
{ }
        break;
      case 71: // expression -> expression, C_CM, assignment_expression
{ }
        break;
      case 72: // labeled_statement -> IDENTIFIER, C_DP, statement
{ }
        break;
      case 73: // labeled_statement -> CASE, constant_expression, C_DP, statement
{ }
        break;
      case 74: // labeled_statement -> DEFAULT, C_DP, statement
{ }
        break;
      case 75: // expression_statement -> C_SC
{ }
        break;
      case 76: // expression_statement -> expression, C_SC
{ }
        break;
      case 77: // selection_statement -> IF, C_OP, expression, C_CP, compound_statement
{ }
        break;
      case 78: // selection_statement -> IF, C_OP, expression, C_CP, compound_statement, ELSE, 
               //                        compound_statement
{ }
        break;
      case 79: // selection_statement -> SWITCH, C_OP, expression, C_CP, compound_statement
{ }
        break;
      case 80: // iteration_statement -> WHILE, C_OP, expression, C_CP, statement
{ }
        break;
      case 81: // iteration_statement -> DO, statement, WHILE, C_OP, expression, C_CP, C_SC
{ }
        break;
      case 82: // iteration_statement -> FOR, C_OP, expression_statement, expression_statement, 
               //                        C_CP, statement
{ }
        break;
      case 83: // iteration_statement -> FOR, C_OP, expression_statement, expression_statement, 
               //                        expression, C_CP, statement
{ }
        break;
      case 84: // jump_statement -> GOTO, IDENTIFIER, C_SC
{ }
        break;
      case 85: // jump_statement -> CONTINUE, C_SC
{ }
        break;
      case 86: // jump_statement -> BREAK, C_SC
{ }
        break;
      case 87: // jump_statement -> RETURN, C_SC
{ }
        break;
      case 88: // jump_statement -> RETURN, expression, C_SC
{ }
        break;
      case 89: // unary_expression -> postfix_expression
{ }
        break;
      case 90: // unary_expression -> INC_OP, unary_expression
{ }
        break;
      case 91: // unary_expression -> DEC_OP, unary_expression
{ }
        break;
      case 92: // unary_expression -> unary_operator, cast_expression
{ }
        break;
      case 93: // unary_expression -> SIZEOF, unary_expression
{ }
        break;
      case 94: // unary_expression -> SIZEOF, C_OP, type_specifier, C_CP
{ }
        break;
      case 95: // unary_expression -> LOBYTE, unary_expression
{ }
        break;
      case 96: // unary_expression -> HIBYTE, unary_expression
{ }
        break;
      case 97: // assignment_operator -> C_ES
{ }
        break;
      case 98: // assignment_operator -> MUL_ASSIGN
{ /* Not supported by 6502 */ }
        break;
      case 99: // assignment_operator -> DIV_ASSIGN
{ /* Not supported by 6502 */ }
        break;
      case 100: // assignment_operator -> MOD_ASSIGN
{ /* Not supported by 6502 */ }
        break;
      case 101: // assignment_operator -> ADD_ASSIGN
{ }
        break;
      case 102: // assignment_operator -> SUB_ASSIGN
{ }
        break;
      case 103: // assignment_operator -> LEFT_ASSIGN
{ }
        break;
      case 104: // assignment_operator -> RIGHT_ASSIGN
{ }
        break;
      case 105: // assignment_operator -> AND_ASSIGN
{ }
        break;
      case 106: // assignment_operator -> XOR_ASSIGN
{ }
        break;
      case 107: // assignment_operator -> OR_ASSIGN
{ }
        break;
      case 108: // logical_and_expression -> inclusive_or_expression
{ }
        break;
      case 109: // logical_and_expression -> logical_and_expression, AND_OP, 
                //                           inclusive_or_expression
{ }
        break;
      case 110: // postfix_expression -> primary_expression
{ }
        break;
      case 111: // postfix_expression -> postfix_expression, C_OB, expression, C_CB
{ }
        break;
      case 112: // postfix_expression -> postfix_expression, C_OP, C_CP
{ }
        break;
      case 113: // postfix_expression -> postfix_expression, C_OP, argument_expression_list, C_CP
{ }
        break;
      case 114: // postfix_expression -> postfix_expression, INC_OP
{ }
        break;
      case 115: // postfix_expression -> postfix_expression, DEC_OP
{ }
        break;
      case 116: // unary_operator -> C_A
{ }
        break;
      case 117: // unary_operator -> C_AK
{ }
        break;
      case 118: // unary_operator -> C_PS
{ }
        break;
      case 119: // unary_operator -> C_MS
{ }
        break;
      case 120: // unary_operator -> C_NS
{ }
        break;
      case 121: // unary_operator -> C_EM
{ }
        break;
      case 122: // cast_expression -> unary_expression
{ }
        break;
      case 123: // cast_expression -> C_OP, type_specifier, C_CP, cast_expression
{ }
        break;
      case 124: // primary_expression -> IDENTIFIER
{ }
        break;
      case 125: // primary_expression -> NUMBER_LITERAL
{ }
        break;
      case 126: // primary_expression -> STRING_LITERAL
{ }
        break;
      case 127: // primary_expression -> C_OP, expression, C_CP
{ }
        break;
      case 128: // inclusive_or_expression -> exclusive_or_expression
{ }
        break;
      case 129: // inclusive_or_expression -> inclusive_or_expression, C_PP, 
                //                            exclusive_or_expression
{ }
        break;
      case 130: // argument_expression_list -> assignment_expression
{ }
        break;
      case 131: // argument_expression_list -> argument_expression_list, C_CM, 
                //                             assignment_expression
{ }
        break;
      case 132: // exclusive_or_expression -> and_expression
{ }
        break;
      case 133: // exclusive_or_expression -> exclusive_or_expression, C_UA, and_expression
{ }
        break;
      case 134: // and_expression -> equality_expression
{ }
        break;
      case 135: // and_expression -> and_expression, C_A, equality_expression
{ }
        break;
      case 136: // equality_expression -> relational_expression
{ }
        break;
      case 137: // equality_expression -> equality_expression, EQ_OP, relational_expression
{ }
        break;
      case 138: // equality_expression -> equality_expression, NE_OP, relational_expression
{ }
        break;
      case 139: // relational_expression -> shift_expression
{ }
        break;
      case 140: // relational_expression -> relational_expression, C_GT, shift_expression
{ }
        break;
      case 141: // relational_expression -> relational_expression, C_LT, shift_expression
{ }
        break;
      case 142: // relational_expression -> relational_expression, LE_OP, shift_expression
{ }
        break;
      case 143: // relational_expression -> relational_expression, GE_OP, shift_expression
{ }
        break;
      case 144: // shift_expression -> additive_expression
{ }
        break;
      case 145: // shift_expression -> shift_expression, LEFT_OP, additive_expression
{ }
        break;
      case 146: // shift_expression -> shift_expression, RIGHT_OP, additive_expression
{ }
        break;
      case 147: // additive_expression -> multiplicative_expression
{ }
        break;
      case 148: // additive_expression -> additive_expression, C_PS, multiplicative_expression
{ }
        break;
      case 149: // additive_expression -> additive_expression, C_MS, multiplicative_expression
{ }
        break;
      case 150: // multiplicative_expression -> cast_expression
{ }
        break;
      case 151: // multiplicative_expression -> multiplicative_expression, C_AK, cast_expression
{ /* Not supported by 6502 */ }
        break;
      case 152: // multiplicative_expression -> multiplicative_expression, C_SS, cast_expression
{ /* Not supported by 6502 */ }
        break;
      case 153: // multiplicative_expression -> multiplicative_expression, C_PC, cast_expression
{ /* Not supported by 6502 */ }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
