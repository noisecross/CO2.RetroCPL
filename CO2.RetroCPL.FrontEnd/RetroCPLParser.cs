// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  C0082
// DateTime: 02/02/2021 13:55:38
// UserName: emilio.arango
// Input file <RetroCPLParser.y - 02/02/2021 13:53:19>

// options: conflicts no-lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CO2.RetroCPL.Commons;

namespace CO2.RetroCPL.FrontEnd
{
public enum Tokens {error=128,EOF=129,IDENTIFIER=130,NUMBER_LITERAL=131,STRING_LITERAL=132,
    SIZEOF=133,LOBYTE=134,HIBYTE=135,PTR_OP=136,INC_OP=137,DEC_OP=138,
    LEFT_OP=139,RIGHT_OP=140,LE_OP=141,GE_OP=142,EQ_OP=143,NE_OP=144,
    AND_OP=145,OR_OP=146,MUL_ASSIGN=147,DIV_ASSIGN=148,MOD_ASSIGN=149,ADD_ASSIGN=150,
    SUB_ASSIGN=151,LEFT_ASSIGN=152,RIGHT_ASSIGN=153,AND_ASSIGN=154,LEFT_ARROW=155,XOR_ASSIGN=156,
    OR_ASSIGN=157,TYPE_NAME=158,TYPEDEF=159,EXTERN=160,STATIC=161,AUTO=162,
    REGISTER=163,BYTE=164,WORD=165,LONGWORD=166,SIGNED=167,UNSIGNED=168,
    CONST=169,VOID=170,VOLATILE=171,STRUCT=172,UNION=173,ENUM=174,
    ELLIPSIS=175,CASE=176,DEFAULT=177,INTERRUPT=178,IF=179,ELSE=180,
    SWITCH=181,WHILE=182,DO=183,FOR=184,GOTO=185,CONTINUE=186,
    BREAK=187,RETURN=188};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<SyntaxTreeNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public SyntaxTreeNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, SyntaxTreeNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<SyntaxTreeNode, LexLocation>
{
  // Verbatim content from RetroCPLParser.y - 02/02/2021 13:53:19
	int n_linecnt
	{
		get
		{
			return ((Scanner)Scanner).helper.getLineCounter();
		}
	}

	int n_chrcnt
	{
		get
		{
			return ((Scanner)Scanner).helper.getPreviousCharacterCounter();
		}
	}

	//public StatementList program = new StatementList();
  // End verbatim content from RetroCPLParser.y - 02/02/2021 13:53:19

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[165];
  private static State[] states = new State[281];
  private static string[] nonTerms = new string[] {
      "translation_unit", "$accept", "external_declaration", "variables_declaration", 
      "function_prototyping", "function_definition", "error_end", "declaration_specifiers", 
      "init_declarator_list", "function_name_definition", "parameter_list", "compound_statement", 
      "abstract_parameter_list", "pointer", "type_specifier", "type_qualifier", 
      "init_declarator", "type_name", "declarator", "direct_declarator", "constant_expression", 
      "initializer", "declaration_list", "statement_list", "parameter_declaration", 
      "abstract_parameter_declaration", "conditional_expression", "statement", 
      "assignment_expression", "logical_or_expression", "expression", "labeled_statement", 
      "expr_statement", "selection_statement", "iteration_statement", "jump_statement", 
      "unary_expression", "assignment_operator", "logical_and_expression", "case_statement_list", 
      "case_statement", "postfix_expression", "unary_operator", "cast_expression", 
      "inclusive_or_expression", "primary_expression", "argument_expression_list", 
      "exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
      "shift_expression", "additive_expression", "multiplicative_expression", 
      };

  static Parser() {
    states[0] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140,128,278},new int[]{-1,1,-3,280,-4,4,-8,5,-15,134,-16,136,-5,162,-10,163,-6,277});
    states[1] = new State(new int[]{129,2,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140,128,278},new int[]{-3,3,-4,4,-8,5,-15,134,-16,136,-5,162,-10,163,-6,277});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{130,160,42,107},new int[]{-9,6,-14,158,-17,161,-19,10,-20,157});
    states[6] = new State(new int[]{59,7,44,8});
    states[7] = new State(-8);
    states[8] = new State(new int[]{42,107,130,152},new int[]{-17,9,-19,10,-14,150,-20,157});
    states[9] = new State(-24);
    states[10] = new State(new int[]{61,11,59,-42,44,-42});
    states[11] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-22,12,-29,13,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[12] = new State(-43);
    states[13] = new State(-59);
    states[14] = new State(-72);
    states[15] = new State(new int[]{146,16,63,146,59,-64,44,-64,93,-64,41,-64,58,-64});
    states[16] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-39,17,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[17] = new State(new int[]{145,18,146,-76,63,-76,59,-76,44,-76,93,-76,41,-76,58,-76});
    states[18] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-45,19,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[19] = new State(new int[]{124,20,145,-120,146,-120,63,-120,59,-120,44,-120,93,-120,41,-120,58,-120});
    states[20] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-48,21,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[21] = new State(new int[]{94,22,124,-140,145,-140,146,-140,63,-140,59,-140,44,-140,93,-140,41,-140,58,-140});
    states[22] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-49,23,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[23] = new State(new int[]{38,24,94,-144,124,-144,145,-144,146,-144,63,-144,59,-144,44,-144,93,-144,41,-144,58,-144});
    states[24] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-50,25,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[25] = new State(new int[]{143,26,144,48,38,-146,94,-146,124,-146,145,-146,146,-146,63,-146,59,-146,44,-146,93,-146,41,-146,58,-146});
    states[26] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-51,27,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[27] = new State(new int[]{62,28,60,50,141,67,142,141,143,-148,144,-148,38,-148,94,-148,124,-148,145,-148,146,-148,63,-148,59,-148,44,-148,93,-148,41,-148,58,-148});
    states[28] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-52,29,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[29] = new State(new int[]{139,30,140,52,62,-151,60,-151,141,-151,142,-151,143,-151,144,-151,38,-151,94,-151,124,-151,145,-151,146,-151,63,-151,59,-151,44,-151,93,-151,41,-151,58,-151});
    states[30] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-53,31,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[31] = new State(new int[]{43,32,45,54,139,-156,140,-156,62,-156,60,-156,141,-156,142,-156,143,-156,144,-156,38,-156,94,-156,124,-156,145,-156,146,-156,63,-156,59,-156,44,-156,93,-156,41,-156,58,-156});
    states[32] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-54,33,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[33] = new State(new int[]{42,34,47,56,37,71,43,-159,45,-159,139,-159,140,-159,62,-159,60,-159,141,-159,142,-159,143,-159,144,-159,38,-159,94,-159,124,-159,145,-159,146,-159,63,-159,59,-159,44,-159,93,-159,41,-159,58,-159});
    states[34] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-44,35,-37,36,-42,37,-46,58,-43,92});
    states[35] = new State(-162);
    states[36] = new State(-133);
    states[37] = new State(new int[]{91,38,137,144,138,145,155,-99,61,-99,147,-99,148,-99,149,-99,150,-99,151,-99,152,-99,153,-99,154,-99,156,-99,157,-99,42,-99,47,-99,37,-99,43,-99,45,-99,139,-99,140,-99,62,-99,60,-99,141,-99,142,-99,143,-99,144,-99,38,-99,94,-99,124,-99,145,-99,146,-99,63,-99,59,-99,44,-99,93,-99,41,-99,58,-99});
    states[38] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,39,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[39] = new State(new int[]{93,40,44,41});
    states[40] = new State(-122);
    states[41] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-29,42,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[42] = new State(-78);
    states[43] = new State(new int[]{145,18,146,-75,63,-75,59,-75,44,-75,93,-75,41,-75,58,-75});
    states[44] = new State(new int[]{124,20,145,-119,146,-119,63,-119,59,-119,44,-119,93,-119,41,-119,58,-119});
    states[45] = new State(new int[]{94,22,124,-139,145,-139,146,-139,63,-139,59,-139,44,-139,93,-139,41,-139,58,-139});
    states[46] = new State(new int[]{38,24,94,-143,124,-143,145,-143,146,-143,63,-143,59,-143,44,-143,93,-143,41,-143,58,-143});
    states[47] = new State(new int[]{143,26,144,48,38,-145,94,-145,124,-145,145,-145,146,-145,63,-145,59,-145,44,-145,93,-145,41,-145,58,-145});
    states[48] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-51,49,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[49] = new State(new int[]{62,28,60,50,141,67,142,141,143,-149,144,-149,38,-149,94,-149,124,-149,145,-149,146,-149,63,-149,59,-149,44,-149,93,-149,41,-149,58,-149});
    states[50] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-52,51,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[51] = new State(new int[]{139,30,140,52,62,-152,60,-152,141,-152,142,-152,143,-152,144,-152,38,-152,94,-152,124,-152,145,-152,146,-152,63,-152,59,-152,44,-152,93,-152,41,-152,58,-152});
    states[52] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-53,53,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[53] = new State(new int[]{43,32,45,54,139,-157,140,-157,62,-157,60,-157,141,-157,142,-157,143,-157,144,-157,38,-157,94,-157,124,-157,145,-157,146,-157,63,-157,59,-157,44,-157,93,-157,41,-157,58,-157});
    states[54] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-54,55,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[55] = new State(new int[]{42,34,47,56,37,71,43,-160,45,-160,139,-160,140,-160,62,-160,60,-160,141,-160,142,-160,143,-160,144,-160,38,-160,94,-160,124,-160,145,-160,146,-160,63,-160,59,-160,44,-160,93,-160,41,-160,58,-160});
    states[56] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-44,57,-37,36,-42,37,-46,58,-43,92});
    states[57] = new State(-163);
    states[58] = new State(-121);
    states[59] = new State(new int[]{40,60,91,-135,137,-135,138,-135,155,-135,61,-135,147,-135,148,-135,149,-135,150,-135,151,-135,152,-135,153,-135,154,-135,156,-135,157,-135,42,-135,47,-135,37,-135,43,-135,45,-135,139,-135,140,-135,62,-135,60,-135,141,-135,142,-135,143,-135,144,-135,38,-135,94,-135,124,-135,145,-135,146,-135,63,-135,59,-135,44,-135,93,-135,41,-135,58,-135});
    states[60] = new State(new int[]{41,61,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-47,62,-29,143,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[61] = new State(-123);
    states[62] = new State(new int[]{41,63,44,64});
    states[63] = new State(-124);
    states[64] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-29,65,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[65] = new State(-142);
    states[66] = new State(new int[]{62,28,60,50,141,67,142,141,143,-147,144,-147,38,-147,94,-147,124,-147,145,-147,146,-147,63,-147,59,-147,44,-147,93,-147,41,-147,58,-147});
    states[67] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-52,68,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[68] = new State(new int[]{139,30,140,52,62,-153,60,-153,141,-153,142,-153,143,-153,144,-153,38,-153,94,-153,124,-153,145,-153,146,-153,63,-153,59,-153,44,-153,93,-153,41,-153,58,-153});
    states[69] = new State(new int[]{43,32,45,54,139,-155,140,-155,62,-155,60,-155,141,-155,142,-155,143,-155,144,-155,38,-155,94,-155,124,-155,145,-155,146,-155,63,-155,59,-155,44,-155,93,-155,41,-155,58,-155});
    states[70] = new State(new int[]{42,34,47,56,37,71,43,-158,45,-158,139,-158,140,-158,62,-158,60,-158,141,-158,142,-158,143,-158,144,-158,38,-158,94,-158,124,-158,145,-158,146,-158,63,-158,59,-158,44,-158,93,-158,41,-158,58,-158});
    states[71] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-44,72,-37,36,-42,37,-46,58,-43,92});
    states[72] = new State(-164);
    states[73] = new State(-136);
    states[74] = new State(-137);
    states[75] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-31,76,-18,78,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-8,132,-15,134,-16,136});
    states[76] = new State(new int[]{41,77,44,41});
    states[77] = new State(-138);
    states[78] = new State(new int[]{41,79});
    states[79] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-44,80,-37,36,-42,37,-46,58,-43,92});
    states[80] = new State(-134);
    states[81] = new State(new int[]{130,59,131,73,132,74,40,83,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-37,82,-42,37,-46,58,-43,92});
    states[82] = new State(-100);
    states[83] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,76,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[84] = new State(-77);
    states[85] = new State(new int[]{139,30,140,52,62,-150,60,-150,141,-150,142,-150,143,-150,144,-150,38,-150,94,-150,124,-150,145,-150,146,-150,63,-150,59,-150,44,-150,93,-150,41,-150,58,-150});
    states[86] = new State(-161);
    states[87] = new State(new int[]{155,119,61,121,147,122,148,123,149,124,150,125,151,126,152,127,153,128,154,129,156,130,157,131,42,-133,47,-133,37,-133,43,-133,45,-133,139,-133,140,-133,62,-133,60,-133,141,-133,142,-133,143,-133,144,-133,38,-133,94,-133,124,-133,145,-133,146,-133,63,-133,59,-133,44,-133,93,-133,41,-133,58,-133},new int[]{-38,88});
    states[88] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-29,89,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[89] = new State(-73);
    states[90] = new State(new int[]{130,59,131,73,132,74,40,83,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-37,91,-42,37,-46,58,-43,92});
    states[91] = new State(-101);
    states[92] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-44,93,-37,36,-42,37,-46,58,-43,92});
    states[93] = new State(-102);
    states[94] = new State(-127);
    states[95] = new State(-128);
    states[96] = new State(-129);
    states[97] = new State(-130);
    states[98] = new State(-131);
    states[99] = new State(-132);
    states[100] = new State(new int[]{40,102,130,59,131,73,132,74,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-37,101,-42,37,-46,58,-43,92});
    states[101] = new State(-103);
    states[102] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-15,103,-31,76,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[103] = new State(new int[]{41,104,42,107},new int[]{-14,105});
    states[104] = new State(-104);
    states[105] = new State(new int[]{41,106});
    states[106] = new State(-105);
    states[107] = new State(new int[]{42,107,130,-29,41,-29,44,-29},new int[]{-14,108});
    states[108] = new State(-30);
    states[109] = new State(-33);
    states[110] = new State(-34);
    states[111] = new State(-35);
    states[112] = new State(-36);
    states[113] = new State(-37);
    states[114] = new State(-38);
    states[115] = new State(new int[]{130,59,131,73,132,74,40,83,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-37,116,-42,37,-46,58,-43,92});
    states[116] = new State(-106);
    states[117] = new State(new int[]{130,59,131,73,132,74,40,83,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-37,118,-42,37,-46,58,-43,92});
    states[118] = new State(-107);
    states[119] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-29,120,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[120] = new State(-74);
    states[121] = new State(-108);
    states[122] = new State(-109);
    states[123] = new State(-110);
    states[124] = new State(-111);
    states[125] = new State(-112);
    states[126] = new State(-113);
    states[127] = new State(-114);
    states[128] = new State(-115);
    states[129] = new State(-116);
    states[130] = new State(-117);
    states[131] = new State(-118);
    states[132] = new State(new int[]{42,107,41,-25},new int[]{-14,133});
    states[133] = new State(-26);
    states[134] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140,130,-19,42,-19,41,-19,44,-19},new int[]{-8,135,-15,134,-16,136});
    states[135] = new State(-20);
    states[136] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140,130,-21,42,-21,41,-21,44,-21},new int[]{-8,137,-15,134,-16,136});
    states[137] = new State(-22);
    states[138] = new State(-39);
    states[139] = new State(-40);
    states[140] = new State(-41);
    states[141] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-52,142,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[142] = new State(new int[]{139,30,140,52,62,-154,60,-154,141,-154,142,-154,143,-154,144,-154,38,-154,94,-154,124,-154,145,-154,146,-154,63,-154,59,-154,44,-154,93,-154,41,-154,58,-154});
    states[143] = new State(-141);
    states[144] = new State(-125);
    states[145] = new State(-126);
    states[146] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,147,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[147] = new State(new int[]{58,148,44,41});
    states[148] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-27,149,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[149] = new State(-65);
    states[150] = new State(new int[]{130,152},new int[]{-20,151});
    states[151] = new State(-27);
    states[152] = new State(new int[]{91,153,61,-31,59,-31,44,-31});
    states[153] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-21,154,-27,156,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[154] = new State(new int[]{93,155});
    states[155] = new State(-32);
    states[156] = new State(-56);
    states[157] = new State(-28);
    states[158] = new State(new int[]{130,159},new int[]{-20,151});
    states[159] = new State(new int[]{91,153,40,-13,61,-31,59,-31,44,-31});
    states[160] = new State(new int[]{91,153,40,-14,61,-31,59,-31,44,-31});
    states[161] = new State(-23);
    states[162] = new State(-5);
    states[163] = new State(new int[]{40,164});
    states[164] = new State(new int[]{41,172,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-13,165,-11,264,-26,273,-8,274,-15,134,-16,136,-25,276});
    states[165] = new State(new int[]{41,166,44,168});
    states[166] = new State(new int[]{59,167});
    states[167] = new State(-11);
    states[168] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-26,169,-8,170,-15,134,-16,136});
    states[169] = new State(-55);
    states[170] = new State(new int[]{42,107,41,-63,44,-63},new int[]{-14,171});
    states[171] = new State(-62);
    states[172] = new State(new int[]{59,173,123,175},new int[]{-12,174});
    states[173] = new State(-12);
    states[174] = new State(-10);
    states[175] = new State(new int[]{125,176,130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,261,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-24,177,-23,253,-28,248,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230,-4,263,-8,260,-15,134,-16,136});
    states[176] = new State(-48);
    states[177] = new State(new int[]{125,178,130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242},new int[]{-28,179,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[178] = new State(-49);
    states[179] = new State(-58);
    states[180] = new State(-66);
    states[181] = new State(new int[]{58,182,40,60,91,-135,137,-135,138,-135,155,-135,61,-135,147,-135,148,-135,149,-135,150,-135,151,-135,152,-135,153,-135,154,-135,156,-135,157,-135,42,-135,47,-135,37,-135,43,-135,45,-135,139,-135,140,-135,62,-135,60,-135,141,-135,142,-135,143,-135,144,-135,38,-135,94,-135,124,-135,145,-135,146,-135,63,-135,59,-135,44,-135});
    states[182] = new State(new int[]{130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242},new int[]{-28,183,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[183] = new State(-79);
    states[184] = new State(-67);
    states[185] = new State(-80);
    states[186] = new State(new int[]{59,187,44,41});
    states[187] = new State(-81);
    states[188] = new State(-68);
    states[189] = new State(new int[]{40,190});
    states[190] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,191,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[191] = new State(new int[]{41,192,44,41});
    states[192] = new State(new int[]{123,175},new int[]{-12,193});
    states[193] = new State(new int[]{180,194,125,-82,130,-82,59,-82,131,-82,132,-82,40,-82,137,-82,138,-82,38,-82,42,-82,43,-82,45,-82,126,-82,33,-82,133,-82,134,-82,135,-82,179,-82,181,-82,182,-82,183,-82,184,-82,185,-82,186,-82,187,-82,188,-82,128,-82,176,-82,177,-82});
    states[194] = new State(new int[]{123,175},new int[]{-12,195});
    states[195] = new State(-83);
    states[196] = new State(new int[]{40,197});
    states[197] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,198,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[198] = new State(new int[]{41,199,44,41});
    states[199] = new State(new int[]{123,200});
    states[200] = new State(new int[]{176,204,177,249},new int[]{-40,201,-41,252});
    states[201] = new State(new int[]{125,202,176,204,177,249},new int[]{-41,203});
    states[202] = new State(-84);
    states[203] = new State(-86);
    states[204] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-21,205,-27,156,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,36,-42,37,-46,58,-43,92});
    states[205] = new State(new int[]{58,206});
    states[206] = new State(new int[]{130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242,125,-87,176,-87,177,-87},new int[]{-24,207,-28,248,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[207] = new State(new int[]{130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242,125,-88,176,-88,177,-88},new int[]{-28,179,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[208] = new State(-69);
    states[209] = new State(new int[]{40,210});
    states[210] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,211,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[211] = new State(new int[]{41,212,44,41});
    states[212] = new State(new int[]{123,175},new int[]{-12,213});
    states[213] = new State(-90);
    states[214] = new State(new int[]{123,175},new int[]{-12,215});
    states[215] = new State(new int[]{182,216});
    states[216] = new State(new int[]{40,217});
    states[217] = new State(new int[]{130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,218,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[218] = new State(new int[]{41,219,44,41});
    states[219] = new State(new int[]{59,220});
    states[220] = new State(-91);
    states[221] = new State(new int[]{40,222});
    states[222] = new State(new int[]{59,185,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-33,223,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[223] = new State(new int[]{59,185,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-33,224,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[224] = new State(new int[]{41,225,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,227,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[225] = new State(new int[]{123,175},new int[]{-12,226});
    states[226] = new State(-92);
    states[227] = new State(new int[]{41,228,44,41});
    states[228] = new State(new int[]{123,175},new int[]{-12,229});
    states[229] = new State(-93);
    states[230] = new State(-70);
    states[231] = new State(new int[]{130,232});
    states[232] = new State(new int[]{59,233});
    states[233] = new State(-94);
    states[234] = new State(new int[]{59,235});
    states[235] = new State(-95);
    states[236] = new State(new int[]{59,237});
    states[237] = new State(-96);
    states[238] = new State(new int[]{59,239,130,59,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117},new int[]{-31,240,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92});
    states[239] = new State(-97);
    states[240] = new State(new int[]{59,241,44,41});
    states[241] = new State(-98);
    states[242] = new State(new int[]{59,244,41,245,123,246,125,247},new int[]{-7,243});
    states[243] = new State(-71);
    states[244] = new State(-15);
    states[245] = new State(-16);
    states[246] = new State(-17);
    states[247] = new State(-18);
    states[248] = new State(-57);
    states[249] = new State(new int[]{58,250});
    states[250] = new State(new int[]{130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242},new int[]{-24,251,-28,248,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[251] = new State(new int[]{130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242,125,-89,176,-89,177,-89},new int[]{-28,179,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[252] = new State(-85);
    states[253] = new State(new int[]{125,254,128,258,130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-24,255,-4,257,-28,248,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230,-8,260,-15,134,-16,136});
    states[254] = new State(-50);
    states[255] = new State(new int[]{125,256,130,181,59,185,131,73,132,74,40,75,137,81,138,90,38,94,42,95,43,96,45,97,126,98,33,99,133,100,134,115,135,117,179,189,181,196,182,209,183,214,184,221,185,231,186,234,187,236,188,238,128,242},new int[]{-28,179,-32,180,-33,184,-31,186,-29,84,-27,14,-30,15,-39,43,-45,44,-48,45,-49,46,-50,47,-51,66,-52,85,-53,69,-54,70,-44,86,-37,87,-42,37,-46,58,-43,92,-34,188,-35,208,-36,230});
    states[256] = new State(-51);
    states[257] = new State(-45);
    states[258] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140,59,244,41,245,123,246,125,247},new int[]{-4,259,-7,243,-8,260,-15,134,-16,136});
    states[259] = new State(-47);
    states[260] = new State(new int[]{42,107,130,152},new int[]{-9,6,-17,161,-19,10,-14,150,-20,157});
    states[261] = new State(new int[]{59,244,41,245,123,246,125,247,170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-7,243,-4,262,-8,260,-15,134,-16,136});
    states[262] = new State(-46);
    states[263] = new State(-44);
    states[264] = new State(new int[]{41,265,44,267});
    states[265] = new State(new int[]{123,175},new int[]{-12,266});
    states[266] = new State(-9);
    states[267] = new State(new int[]{170,109,164,110,165,111,166,112,167,113,168,114,169,138,171,139,178,140},new int[]{-25,268,-8,269,-15,134,-16,136});
    states[268] = new State(-53);
    states[269] = new State(new int[]{130,272,42,107},new int[]{-14,270});
    states[270] = new State(new int[]{130,271});
    states[271] = new State(-60);
    states[272] = new State(-61);
    states[273] = new State(-54);
    states[274] = new State(new int[]{130,272,42,107,41,-63,44,-63},new int[]{-14,275});
    states[275] = new State(new int[]{130,271,41,-62,44,-62});
    states[276] = new State(-52);
    states[277] = new State(-6);
    states[278] = new State(new int[]{59,244,41,245,123,246,125,247},new int[]{-7,279});
    states[279] = new State(-7);
    states[280] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-6});
    rules[7] = new Rule(-3, new int[]{128,-7});
    rules[8] = new Rule(-4, new int[]{-8,-9,59});
    rules[9] = new Rule(-6, new int[]{-10,40,-11,41,-12});
    rules[10] = new Rule(-6, new int[]{-10,40,41,-12});
    rules[11] = new Rule(-5, new int[]{-10,40,-13,41,59});
    rules[12] = new Rule(-5, new int[]{-10,40,41,59});
    rules[13] = new Rule(-10, new int[]{-8,-14,130});
    rules[14] = new Rule(-10, new int[]{-8,130});
    rules[15] = new Rule(-7, new int[]{59});
    rules[16] = new Rule(-7, new int[]{41});
    rules[17] = new Rule(-7, new int[]{123});
    rules[18] = new Rule(-7, new int[]{125});
    rules[19] = new Rule(-8, new int[]{-15});
    rules[20] = new Rule(-8, new int[]{-15,-8});
    rules[21] = new Rule(-8, new int[]{-16});
    rules[22] = new Rule(-8, new int[]{-16,-8});
    rules[23] = new Rule(-9, new int[]{-17});
    rules[24] = new Rule(-9, new int[]{-9,44,-17});
    rules[25] = new Rule(-18, new int[]{-8});
    rules[26] = new Rule(-18, new int[]{-8,-14});
    rules[27] = new Rule(-19, new int[]{-14,-20});
    rules[28] = new Rule(-19, new int[]{-20});
    rules[29] = new Rule(-14, new int[]{42});
    rules[30] = new Rule(-14, new int[]{42,-14});
    rules[31] = new Rule(-20, new int[]{130});
    rules[32] = new Rule(-20, new int[]{130,91,-21,93});
    rules[33] = new Rule(-15, new int[]{170});
    rules[34] = new Rule(-15, new int[]{164});
    rules[35] = new Rule(-15, new int[]{165});
    rules[36] = new Rule(-15, new int[]{166});
    rules[37] = new Rule(-15, new int[]{167});
    rules[38] = new Rule(-15, new int[]{168});
    rules[39] = new Rule(-16, new int[]{169});
    rules[40] = new Rule(-16, new int[]{171});
    rules[41] = new Rule(-16, new int[]{178});
    rules[42] = new Rule(-17, new int[]{-19});
    rules[43] = new Rule(-17, new int[]{-19,61,-22});
    rules[44] = new Rule(-23, new int[]{-4});
    rules[45] = new Rule(-23, new int[]{-23,-4});
    rules[46] = new Rule(-23, new int[]{128,-4});
    rules[47] = new Rule(-23, new int[]{-23,128,-4});
    rules[48] = new Rule(-12, new int[]{123,125});
    rules[49] = new Rule(-12, new int[]{123,-24,125});
    rules[50] = new Rule(-12, new int[]{123,-23,125});
    rules[51] = new Rule(-12, new int[]{123,-23,-24,125});
    rules[52] = new Rule(-11, new int[]{-25});
    rules[53] = new Rule(-11, new int[]{-11,44,-25});
    rules[54] = new Rule(-13, new int[]{-26});
    rules[55] = new Rule(-13, new int[]{-13,44,-26});
    rules[56] = new Rule(-21, new int[]{-27});
    rules[57] = new Rule(-24, new int[]{-28});
    rules[58] = new Rule(-24, new int[]{-24,-28});
    rules[59] = new Rule(-22, new int[]{-29});
    rules[60] = new Rule(-25, new int[]{-8,-14,130});
    rules[61] = new Rule(-25, new int[]{-8,130});
    rules[62] = new Rule(-26, new int[]{-8,-14});
    rules[63] = new Rule(-26, new int[]{-8});
    rules[64] = new Rule(-27, new int[]{-30});
    rules[65] = new Rule(-27, new int[]{-30,63,-31,58,-27});
    rules[66] = new Rule(-28, new int[]{-32});
    rules[67] = new Rule(-28, new int[]{-33});
    rules[68] = new Rule(-28, new int[]{-34});
    rules[69] = new Rule(-28, new int[]{-35});
    rules[70] = new Rule(-28, new int[]{-36});
    rules[71] = new Rule(-28, new int[]{128,-7});
    rules[72] = new Rule(-29, new int[]{-27});
    rules[73] = new Rule(-29, new int[]{-37,-38,-29});
    rules[74] = new Rule(-29, new int[]{-37,155,-29});
    rules[75] = new Rule(-30, new int[]{-39});
    rules[76] = new Rule(-30, new int[]{-30,146,-39});
    rules[77] = new Rule(-31, new int[]{-29});
    rules[78] = new Rule(-31, new int[]{-31,44,-29});
    rules[79] = new Rule(-32, new int[]{130,58,-28});
    rules[80] = new Rule(-33, new int[]{59});
    rules[81] = new Rule(-33, new int[]{-31,59});
    rules[82] = new Rule(-34, new int[]{179,40,-31,41,-12});
    rules[83] = new Rule(-34, new int[]{179,40,-31,41,-12,180,-12});
    rules[84] = new Rule(-34, new int[]{181,40,-31,41,123,-40,125});
    rules[85] = new Rule(-40, new int[]{-41});
    rules[86] = new Rule(-40, new int[]{-40,-41});
    rules[87] = new Rule(-41, new int[]{176,-21,58});
    rules[88] = new Rule(-41, new int[]{176,-21,58,-24});
    rules[89] = new Rule(-41, new int[]{177,58,-24});
    rules[90] = new Rule(-35, new int[]{182,40,-31,41,-12});
    rules[91] = new Rule(-35, new int[]{183,-12,182,40,-31,41,59});
    rules[92] = new Rule(-35, new int[]{184,40,-33,-33,41,-12});
    rules[93] = new Rule(-35, new int[]{184,40,-33,-33,-31,41,-12});
    rules[94] = new Rule(-36, new int[]{185,130,59});
    rules[95] = new Rule(-36, new int[]{186,59});
    rules[96] = new Rule(-36, new int[]{187,59});
    rules[97] = new Rule(-36, new int[]{188,59});
    rules[98] = new Rule(-36, new int[]{188,-31,59});
    rules[99] = new Rule(-37, new int[]{-42});
    rules[100] = new Rule(-37, new int[]{137,-37});
    rules[101] = new Rule(-37, new int[]{138,-37});
    rules[102] = new Rule(-37, new int[]{-43,-44});
    rules[103] = new Rule(-37, new int[]{133,-37});
    rules[104] = new Rule(-37, new int[]{133,40,-15,41});
    rules[105] = new Rule(-37, new int[]{133,40,-15,-14,41});
    rules[106] = new Rule(-37, new int[]{134,-37});
    rules[107] = new Rule(-37, new int[]{135,-37});
    rules[108] = new Rule(-38, new int[]{61});
    rules[109] = new Rule(-38, new int[]{147});
    rules[110] = new Rule(-38, new int[]{148});
    rules[111] = new Rule(-38, new int[]{149});
    rules[112] = new Rule(-38, new int[]{150});
    rules[113] = new Rule(-38, new int[]{151});
    rules[114] = new Rule(-38, new int[]{152});
    rules[115] = new Rule(-38, new int[]{153});
    rules[116] = new Rule(-38, new int[]{154});
    rules[117] = new Rule(-38, new int[]{156});
    rules[118] = new Rule(-38, new int[]{157});
    rules[119] = new Rule(-39, new int[]{-45});
    rules[120] = new Rule(-39, new int[]{-39,145,-45});
    rules[121] = new Rule(-42, new int[]{-46});
    rules[122] = new Rule(-42, new int[]{-42,91,-31,93});
    rules[123] = new Rule(-42, new int[]{130,40,41});
    rules[124] = new Rule(-42, new int[]{130,40,-47,41});
    rules[125] = new Rule(-42, new int[]{-42,137});
    rules[126] = new Rule(-42, new int[]{-42,138});
    rules[127] = new Rule(-43, new int[]{38});
    rules[128] = new Rule(-43, new int[]{42});
    rules[129] = new Rule(-43, new int[]{43});
    rules[130] = new Rule(-43, new int[]{45});
    rules[131] = new Rule(-43, new int[]{126});
    rules[132] = new Rule(-43, new int[]{33});
    rules[133] = new Rule(-44, new int[]{-37});
    rules[134] = new Rule(-44, new int[]{40,-18,41,-44});
    rules[135] = new Rule(-46, new int[]{130});
    rules[136] = new Rule(-46, new int[]{131});
    rules[137] = new Rule(-46, new int[]{132});
    rules[138] = new Rule(-46, new int[]{40,-31,41});
    rules[139] = new Rule(-45, new int[]{-48});
    rules[140] = new Rule(-45, new int[]{-45,124,-48});
    rules[141] = new Rule(-47, new int[]{-29});
    rules[142] = new Rule(-47, new int[]{-47,44,-29});
    rules[143] = new Rule(-48, new int[]{-49});
    rules[144] = new Rule(-48, new int[]{-48,94,-49});
    rules[145] = new Rule(-49, new int[]{-50});
    rules[146] = new Rule(-49, new int[]{-49,38,-50});
    rules[147] = new Rule(-50, new int[]{-51});
    rules[148] = new Rule(-50, new int[]{-50,143,-51});
    rules[149] = new Rule(-50, new int[]{-50,144,-51});
    rules[150] = new Rule(-51, new int[]{-52});
    rules[151] = new Rule(-51, new int[]{-51,62,-52});
    rules[152] = new Rule(-51, new int[]{-51,60,-52});
    rules[153] = new Rule(-51, new int[]{-51,141,-52});
    rules[154] = new Rule(-51, new int[]{-51,142,-52});
    rules[155] = new Rule(-52, new int[]{-53});
    rules[156] = new Rule(-52, new int[]{-52,139,-53});
    rules[157] = new Rule(-52, new int[]{-52,140,-53});
    rules[158] = new Rule(-53, new int[]{-54});
    rules[159] = new Rule(-53, new int[]{-53,43,-54});
    rules[160] = new Rule(-53, new int[]{-53,45,-54});
    rules[161] = new Rule(-54, new int[]{-44});
    rules[162] = new Rule(-54, new int[]{-54,42,-44});
    rules[163] = new Rule(-54, new int[]{-54,47,-44});
    rules[164] = new Rule(-54, new int[]{-54,37,-44});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // translation_unit -> external_declaration
{ CurrentSemanticValue = new TranslationUnitSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 3: // translation_unit -> translation_unit, external_declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                             SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 4: // external_declaration -> variables_declaration
{ CurrentSemanticValue = new ExternalDeclarationSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 5: // external_declaration -> function_prototyping
{ CurrentSemanticValue = new ExternalDeclarationSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 6: // external_declaration -> function_definition
{ CurrentSemanticValue = new ExternalDeclarationSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 7: // external_declaration -> error, error_end
{ CurrentSemanticValue = new ExternalDeclarationSTN(4, n_linecnt, n_chrcnt); this.yyerrok();              }
        break;
      case 8: // variables_declaration -> declaration_specifiers, init_declarator_list, ';'
{ CurrentSemanticValue = new VariablesDeclarationSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 9: // function_definition -> function_name_definition, '(', parameter_list, ')', 
              //                        compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 10: // function_definition -> function_name_definition, '(', ')', compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1] });     }
        break;
      case 11: // function_prototyping -> function_name_definition, '(', abstract_parameter_list, 
               //                         ')', ';'
{ CurrentSemanticValue = new FunctionPrototypingSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3] }); }
        break;
      case 12: // function_prototyping -> function_name_definition, '(', ')', ';'
{ CurrentSemanticValue = new FunctionPrototypingSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4]     }); }
        break;
      case 13: // function_name_definition -> declaration_specifiers, pointer, IDENTIFIER
{ CurrentSemanticValue = new FunctionNameDefinitionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], new IdentifierSTL(3, n_linecnt, n_chrcnt) }); }
        break;
      case 14: // function_name_definition -> declaration_specifiers, IDENTIFIER
{ CurrentSemanticValue = new FunctionNameDefinitionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], new IdentifierSTL(2, n_linecnt, n_chrcnt) }); }
        break;
      case 15: // error_end -> ';'
{ ; }
        break;
      case 16: // error_end -> ')'
{ ; }
        break;
      case 17: // error_end -> '{'
{ ; }
        break;
      case 18: // error_end -> '}'
{ ; }
        break;
      case 19: // declaration_specifiers -> type_specifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 20: // declaration_specifiers -> type_specifier, declaration_specifiers
{ ValueStack[ValueStack.Depth-1].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-1];                                       }
        break;
      case 21: // declaration_specifiers -> type_qualifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 22: // declaration_specifiers -> type_qualifier, declaration_specifiers
{ ValueStack[ValueStack.Depth-1].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-1];                                       }
        break;
      case 23: // init_declarator_list -> init_declarator
{ CurrentSemanticValue = new InitDeclaratorListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 24: // init_declarator_list -> init_declarator_list, ',', init_declarator
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                                }
        break;
      case 25: // type_name -> declaration_specifiers
{ CurrentSemanticValue = new TypeNameSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 26: // type_name -> declaration_specifiers, pointer
{ CurrentSemanticValue = new TypeNameSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 27: // declarator -> pointer, direct_declarator
{ CurrentSemanticValue = new DeclaratorSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 28: // declarator -> direct_declarator
{ CurrentSemanticValue = new DeclaratorSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 29: // pointer -> '*'
{ CurrentSemanticValue = new PointerSTN(1, n_linecnt, n_chrcnt);                    }
        break;
      case 30: // pointer -> '*', pointer
{ ValueStack[ValueStack.Depth-1].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-1];           }
        break;
      case 31: // direct_declarator -> IDENTIFIER
{ CurrentSemanticValue = new DirectDeclaratorSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt)     }); }
        break;
      case 32: // direct_declarator -> IDENTIFIER, '[', constant_expression, ']'
{ CurrentSemanticValue = new DirectDeclaratorSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt), ValueStack[ValueStack.Depth-2] }); }
        break;
      case 33: // type_specifier -> VOID
{ CurrentSemanticValue = new TypeSpecifierSTN(1, n_linecnt, n_chrcnt, "void");     }
        break;
      case 34: // type_specifier -> BYTE
{ CurrentSemanticValue = new TypeSpecifierSTN(2, n_linecnt, n_chrcnt, "byte");     }
        break;
      case 35: // type_specifier -> WORD
{ CurrentSemanticValue = new TypeSpecifierSTN(3, n_linecnt, n_chrcnt, "word");     }
        break;
      case 36: // type_specifier -> LONGWORD
{ CurrentSemanticValue = new TypeSpecifierSTN(4, n_linecnt, n_chrcnt, "longword"); }
        break;
      case 37: // type_specifier -> SIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(5, n_linecnt, n_chrcnt, "signed");   }
        break;
      case 38: // type_specifier -> UNSIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(6, n_linecnt, n_chrcnt, "unsigned"); }
        break;
      case 39: // type_qualifier -> CONST
{ CurrentSemanticValue = new TypeQualifierSTN(1, n_linecnt, n_chrcnt, "const");     }
        break;
      case 40: // type_qualifier -> VOLATILE
{ CurrentSemanticValue = new TypeQualifierSTN(2, n_linecnt, n_chrcnt, "volatile");  }
        break;
      case 41: // type_qualifier -> INTERRUPT
{ CurrentSemanticValue = new TypeQualifierSTN(3, n_linecnt, n_chrcnt, "interrupt"); }
        break;
      case 42: // init_declarator -> declarator
{ CurrentSemanticValue = new InitDeclaratorSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 43: // init_declarator -> declarator, '=', initializer
{ CurrentSemanticValue = new InitDeclaratorSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 44: // declaration_list -> variables_declaration
{ CurrentSemanticValue = new DeclarationListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 45: // declaration_list -> declaration_list, variables_declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                             }
        break;
      case 46: // declaration_list -> error, variables_declaration
{ CurrentSemanticValue = new DeclarationListSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 47: // declaration_list -> declaration_list, error, variables_declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                             }
        break;
      case 48: // compound_statement -> '{', '}'
{ CurrentSemanticValue = new CompoundStatementSTN(1, n_linecnt, n_chrcnt);                                  }
        break;
      case 49: // compound_statement -> '{', statement_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 50: // compound_statement -> '{', declaration_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 51: // compound_statement -> '{', declaration_list, statement_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 52: // parameter_list -> parameter_declaration
{ CurrentSemanticValue = new ParameterListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 53: // parameter_list -> parameter_list, ',', parameter_declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                           }
        break;
      case 54: // abstract_parameter_list -> abstract_parameter_declaration
{ CurrentSemanticValue = new AbstractParameterListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 55: // abstract_parameter_list -> abstract_parameter_list, ',', 
               //                            abstract_parameter_declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                                   }
        break;
      case 56: // constant_expression -> conditional_expression
{ CurrentSemanticValue = new ConstantExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 57: // statement_list -> statement
{ CurrentSemanticValue = new StatementListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 58: // statement_list -> statement_list, statement
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                           }
        break;
      case 59: // initializer -> assignment_expression
{ CurrentSemanticValue = new InitializerSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 60: // parameter_declaration -> declaration_specifiers, pointer, IDENTIFIER
{ CurrentSemanticValue = new ParameterDeclarationSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], new IdentifierSTL(3, n_linecnt, n_chrcnt) }); }
        break;
      case 61: // parameter_declaration -> declaration_specifiers, IDENTIFIER
{ CurrentSemanticValue = new ParameterDeclarationSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], new IdentifierSTL(2, n_linecnt, n_chrcnt)     }); }
        break;
      case 62: // abstract_parameter_declaration -> declaration_specifiers, pointer
{ CurrentSemanticValue = new AbstractParameterDeclarationSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 63: // abstract_parameter_declaration -> declaration_specifiers
{ CurrentSemanticValue = new AbstractParameterDeclarationSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 64: // conditional_expression -> logical_or_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 65: // conditional_expression -> logical_or_expression, '?', expression, ':', 
               //                           conditional_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 66: // statement -> labeled_statement
{ CurrentSemanticValue = new StatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 67: // statement -> expr_statement
{ CurrentSemanticValue = new StatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 68: // statement -> selection_statement
{ CurrentSemanticValue = new StatementSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 69: // statement -> iteration_statement
{ CurrentSemanticValue = new StatementSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 70: // statement -> jump_statement
{ CurrentSemanticValue = new StatementSTN(5, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 71: // statement -> error, error_end
{ CurrentSemanticValue = new StatementSTN(6, n_linecnt, n_chrcnt, new SyntaxTreeNode[] {    }); }
        break;
      case 72: // assignment_expression -> conditional_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 73: // assignment_expression -> unary_expression, assignment_operator, 
               //                          assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 74: // assignment_expression -> unary_expression, LEFT_ARROW, assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 75: // logical_or_expression -> logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 76: // logical_or_expression -> logical_or_expression, OR_OP, logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 77: // expression -> assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 78: // expression -> expression, ',', assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 79: // labeled_statement -> IDENTIFIER, ':', statement
{ CurrentSemanticValue = new LabeledStatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt), ValueStack[ValueStack.Depth-1] }); }
        break;
      case 80: // expr_statement -> ';'
{ CurrentSemanticValue = new ExpressionStatementSTN(1, n_linecnt, n_chrcnt);                              }
        break;
      case 81: // expr_statement -> expression, ';'
{ CurrentSemanticValue = new ExpressionStatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); }
        break;
      case 82: // selection_statement -> IF, '(', expression, ')', compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 83: // selection_statement -> IF, '(', expression, ')', compound_statement, ELSE, 
               //                        compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 84: // selection_statement -> SWITCH, '(', expression, ')', '{', case_statement_list, 
               //                        '}'
{ CurrentSemanticValue = new SelectionStatementSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 85: // case_statement_list -> case_statement
{ CurrentSemanticValue = new CaseStatementListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 86: // case_statement_list -> case_statement_list, case_statement
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                               }
        break;
      case 87: // case_statement -> CASE, constant_expression, ':'
{ CurrentSemanticValue = new CaseStatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 88: // case_statement -> CASE, constant_expression, ':', statement_list
{ CurrentSemanticValue = new CaseStatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 89: // case_statement -> DEFAULT, ':', statement_list
{ CurrentSemanticValue = new CaseStatementSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 90: // iteration_statement -> WHILE, '(', expression, ')', compound_statement
{ CurrentSemanticValue = new IterationStatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 91: // iteration_statement -> DO, compound_statement, WHILE, '(', expression, ')', ';'
{ CurrentSemanticValue = new IterationStatementSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-3]         }); }
        break;
      case 92: // iteration_statement -> FOR, '(', expr_statement, expr_statement, ')', 
               //                        compound_statement
{ CurrentSemanticValue = new IterationStatementSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 93: // iteration_statement -> FOR, '(', expr_statement, expr_statement, expression, 
               //                        ')', compound_statement
{ CurrentSemanticValue = new IterationStatementSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 94: // jump_statement -> GOTO, IDENTIFIER, ';'
{ CurrentSemanticValue = new JumpStatementSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt) }); }
        break;
      case 95: // jump_statement -> CONTINUE, ';'
{ CurrentSemanticValue = new JumpStatementSTN(2, n_linecnt, n_chrcnt);                                                                     }
        break;
      case 96: // jump_statement -> BREAK, ';'
{ CurrentSemanticValue = new JumpStatementSTN(3, n_linecnt, n_chrcnt);                                                                     }
        break;
      case 97: // jump_statement -> RETURN, ';'
{ CurrentSemanticValue = new JumpStatementSTN(4, n_linecnt, n_chrcnt);                                                                     }
        break;
      case 98: // jump_statement -> RETURN, expression, ';'
{ CurrentSemanticValue = new JumpStatementSTN(5, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                        }); }
        break;
      case 99: // unary_expression -> postfix_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 100: // unary_expression -> INC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 101: // unary_expression -> DEC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 102: // unary_expression -> unary_operator, cast_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 103: // unary_expression -> SIZEOF, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(5, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 104: // unary_expression -> SIZEOF, '(', type_specifier, ')'
{ CurrentSemanticValue = new UnaryExpressionSTN(6, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 105: // unary_expression -> SIZEOF, '(', type_specifier, pointer, ')'
{ CurrentSemanticValue = new UnaryExpressionSTN(7, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 106: // unary_expression -> LOBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(8, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 107: // unary_expression -> HIBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(9, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 108: // assignment_operator -> '='
{ CurrentSemanticValue = new AssignmentOperatorSTN( 1, n_linecnt, n_chrcnt, "=");   }
        break;
      case 109: // assignment_operator -> MUL_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 2, n_linecnt, n_chrcnt, "*="); /* Not supported by RetroC */ }
        break;
      case 110: // assignment_operator -> DIV_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 3, n_linecnt, n_chrcnt, "/="); /* Not supported by RetroC */ }
        break;
      case 111: // assignment_operator -> MOD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 4, n_linecnt, n_chrcnt, "%="); /* Not supported by RetroC */ }
        break;
      case 112: // assignment_operator -> ADD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 5, n_linecnt, n_chrcnt, "+=");  }
        break;
      case 113: // assignment_operator -> SUB_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 6, n_linecnt, n_chrcnt, "-=");  }
        break;
      case 114: // assignment_operator -> LEFT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 7, n_linecnt, n_chrcnt, "<<="); }
        break;
      case 115: // assignment_operator -> RIGHT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 8, n_linecnt, n_chrcnt, ">>="); }
        break;
      case 116: // assignment_operator -> AND_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 9, n_linecnt, n_chrcnt, "&=");  }
        break;
      case 117: // assignment_operator -> XOR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(10, n_linecnt, n_chrcnt, "^=");  }
        break;
      case 118: // assignment_operator -> OR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(11, n_linecnt, n_chrcnt, "|=");  }
        break;
      case 119: // logical_and_expression -> inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 120: // logical_and_expression -> logical_and_expression, AND_OP, 
                //                           inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 121: // postfix_expression -> primary_expression
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]                                              }); }
        break;
      case 122: // postfix_expression -> postfix_expression, '[', expression, ']'
{ CurrentSemanticValue = new PostfixExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]                                          }); }
        break;
      case 123: // postfix_expression -> IDENTIFIER, '(', ')'
{ CurrentSemanticValue = new PostfixExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt)     }); }
        break;
      case 124: // postfix_expression -> IDENTIFIER, '(', argument_expression_list, ')'
{ CurrentSemanticValue = new PostfixExpressionSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt), ValueStack[ValueStack.Depth-2] }); }
        break;
      case 125: // postfix_expression -> postfix_expression, INC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(5, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                              }); }
        break;
      case 126: // postfix_expression -> postfix_expression, DEC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(6, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                              }); }
        break;
      case 127: // unary_operator -> '&'
{ CurrentSemanticValue = new UnaryOperatorSTN(1, n_linecnt, n_chrcnt); }
        break;
      case 128: // unary_operator -> '*'
{ CurrentSemanticValue = new UnaryOperatorSTN(2, n_linecnt, n_chrcnt); }
        break;
      case 129: // unary_operator -> '+'
{ CurrentSemanticValue = new UnaryOperatorSTN(3, n_linecnt, n_chrcnt); }
        break;
      case 130: // unary_operator -> '-'
{ CurrentSemanticValue = new UnaryOperatorSTN(4, n_linecnt, n_chrcnt); }
        break;
      case 131: // unary_operator -> '~'
{ CurrentSemanticValue = new UnaryOperatorSTN(5, n_linecnt, n_chrcnt); }
        break;
      case 132: // unary_operator -> '!'
{ CurrentSemanticValue = new UnaryOperatorSTN(6, n_linecnt, n_chrcnt); }
        break;
      case 133: // cast_expression -> unary_expression
{ CurrentSemanticValue = new CastExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 134: // cast_expression -> '(', type_name, ')', cast_expression
{ CurrentSemanticValue = new CastExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 135: // primary_expression -> IDENTIFIER
{ CurrentSemanticValue = new PrimaryExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt, n_chrcnt)    }); }
        break;
      case 136: // primary_expression -> NUMBER_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new NumberLiteralSTL(1, n_linecnt, n_chrcnt) }); }
        break;
      case 137: // primary_expression -> STRING_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { new StringLiteralSTL(1, n_linecnt, n_chrcnt) }); }
        break;
      case 138: // primary_expression -> '(', expression, ')'
{ CurrentSemanticValue = new PrimaryExpressionSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                             }); }
        break;
      case 139: // inclusive_or_expression -> exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 140: // inclusive_or_expression -> inclusive_or_expression, '|', 
                //                            exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 141: // argument_expression_list -> assignment_expression
{ CurrentSemanticValue = new ArgumentExpressionListSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 142: // argument_expression_list -> argument_expression_list, ',', 
                //                             assignment_expression
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                                    }
        break;
      case 143: // exclusive_or_expression -> and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 144: // exclusive_or_expression -> exclusive_or_expression, '^', and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 145: // and_expression -> equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 146: // and_expression -> and_expression, '&', equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 147: // equality_expression -> relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 148: // equality_expression -> equality_expression, EQ_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 149: // equality_expression -> equality_expression, NE_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 150: // relational_expression -> shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 151: // relational_expression -> relational_expression, '>', shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 152: // relational_expression -> relational_expression, '<', shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 153: // relational_expression -> relational_expression, LE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 154: // relational_expression -> relational_expression, GE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(5, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 155: // shift_expression -> additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 156: // shift_expression -> shift_expression, LEFT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 157: // shift_expression -> shift_expression, RIGHT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 158: // additive_expression -> multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 159: // additive_expression -> additive_expression, '+', multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 160: // additive_expression -> additive_expression, '-', multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 161: // multiplicative_expression -> cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(1, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     });                             }
        break;
      case 162: // multiplicative_expression -> multiplicative_expression, '*', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(2, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by RetroC */ }
        break;
      case 163: // multiplicative_expression -> multiplicative_expression, '/', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(3, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by RetroC */ }
        break;
      case 164: // multiplicative_expression -> multiplicative_expression, '%', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(4, n_linecnt, n_chrcnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by RetroC */ }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
