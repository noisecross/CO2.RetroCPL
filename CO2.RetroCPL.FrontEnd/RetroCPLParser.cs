// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  GIST11RW
// DateTime: 09/01/2018 17:37:46
// UserName: soporte0
// Input file <RetroCPLParser.y - 09/01/2018 17:17:26>

// options: conflicts no-lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CO2.RetroCPL.Commons;

namespace CO2.RetroCPL.FrontEnd
{
public enum Tokens {error=128,EOF=129,IDENTIFIER=130,NUMBER_LITERAL=131,STRING_LITERAL=132,
    SIZEOF=133,LOBYTE=134,HIBYTE=135,PTR_OP=136,INC_OP=137,DEC_OP=138,
    LEFT_OP=139,RIGHT_OP=140,LE_OP=141,GE_OP=142,EQ_OP=143,NE_OP=144,
    AND_OP=145,OR_OP=146,MUL_ASSIGN=147,DIV_ASSIGN=148,MOD_ASSIGN=149,ADD_ASSIGN=150,
    SUB_ASSIGN=151,LEFT_ASSIGN=152,RIGHT_ASSIGN=153,AND_ASSIGN=154,LEFT_ARROW=155,XOR_ASSIGN=156,
    OR_ASSIGN=157,TYPE_NAME=158,TYPEDEF=159,EXTERN=160,STATIC=161,AUTO=162,
    REGISTER=163,BYTE=164,WORD=165,LONGWORD=166,SIGNED=167,UNSIGNED=168,
    CONST=169,VOID=170,VOLATILE=171,STRUCT=172,UNION=173,ENUM=174,
    ELLIPSIS=175,CASE=176,DEFAULT=177,INTERRUPT=178,IF=179,ELSE=180,
    SWITCH=181,WHILE=182,DO=183,FOR=184,GOTO=185,CONTINUE=186,
    BREAK=187,RETURN=188};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<SyntaxTreeNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public SyntaxTreeNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, SyntaxTreeNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<SyntaxTreeNode, LexLocation>
{
  // Verbatim content from RetroCPLParser.y - 09/01/2018 17:17:26
	int n_linecnt
	{
		get
		{
			return ((Scanner)Scanner).helper.n_linecnt;
		}
	}

	//public StatementList program = new StatementList();
  // End verbatim content from RetroCPLParser.y - 09/01/2018 17:17:26

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[153];
  private static State[] states = new State[263];
  private static string[] nonTerms = new string[] {
      "translation_unit", "$accept", "external_declaration", "function_definition", 
      "declaration", "error_end", "declaration_specifiers", "init_declarator_list", 
      "direct_declarator", "declaration_list", "compound_statement", "type_specifier", 
      "type_qualifier", "init_declarator", "parameter_list", "identifier_list", 
      "constant_expression", "statement_list", "initializer", "parameter_declaration", 
      "conditional_expression", "statement", "assignment_expression", "logical_or_expression", 
      "expression", "labeled_statement", "expression_statement", "selection_statement", 
      "iteration_statement", "jump_statement", "unary_expression", "assignment_operator", 
      "logical_and_expression", "postfix_expression", "unary_operator", "cast_expression", 
      "inclusive_or_expression", "primary_expression", "argument_expression_list", 
      "exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
      "shift_expression", "additive_expression", "multiplicative_expression", 
      };

  static Parser() {
    states[0] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,128,260},new int[]{-1,1,-3,262,-4,4,-7,5,-12,160,-13,162,-5,259});
    states[1] = new State(new int[]{129,2,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,128,260},new int[]{-3,3,-4,4,-7,5,-12,160,-13,162,-5,259});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{59,13,130,149,40,157},new int[]{-9,6,-8,14,-14,174});
    states[6] = new State(new int[]{91,19,61,146,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,128,258,123,175,59,-44,44,-44},new int[]{-10,7,-11,257,-5,256,-7,12,-12,160,-13,162});
    states[7] = new State(new int[]{128,10,123,175,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-11,8,-5,9,-7,12,-12,160,-13,162});
    states[8] = new State(-9);
    states[9] = new State(-28);
    states[10] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-5,11,-7,12,-12,160,-13,162});
    states[11] = new State(-30);
    states[12] = new State(new int[]{59,13,130,149,40,157},new int[]{-8,14,-14,174,-9,18});
    states[13] = new State(-7);
    states[14] = new State(new int[]{59,15,44,16});
    states[15] = new State(-8);
    states[16] = new State(new int[]{130,149,40,157},new int[]{-14,17,-9,18});
    states[17] = new State(-20);
    states[18] = new State(new int[]{91,19,61,146,59,-44,44,-44});
    states[19] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-17,20,-21,22,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[20] = new State(new int[]{93,21});
    states[21] = new State(-26);
    states[22] = new State(-50);
    states[23] = new State(new int[]{146,24,63,142,93,-56,44,-56,41,-56,58,-56,59,-56});
    states[24] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-33,25,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[25] = new State(new int[]{145,26,146,-68,63,-68,93,-68,44,-68,41,-68,58,-68,59,-68});
    states[26] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-37,27,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[27] = new State(new int[]{124,28,145,-108,146,-108,63,-108,93,-108,44,-108,41,-108,58,-108,59,-108});
    states[28] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-40,29,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[29] = new State(new int[]{94,30,124,-128,145,-128,146,-128,63,-128,93,-128,44,-128,41,-128,58,-128,59,-128});
    states[30] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-41,31,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[31] = new State(new int[]{38,32,94,-132,124,-132,145,-132,146,-132,63,-132,93,-132,44,-132,41,-132,58,-132,59,-132});
    states[32] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-42,33,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[33] = new State(new int[]{143,34,144,57,38,-134,94,-134,124,-134,145,-134,146,-134,63,-134,93,-134,44,-134,41,-134,58,-134,59,-134});
    states[34] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-43,35,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[35] = new State(new int[]{62,36,60,59,141,82,142,131,143,-136,144,-136,38,-136,94,-136,124,-136,145,-136,146,-136,63,-136,93,-136,44,-136,41,-136,58,-136,59,-136});
    states[36] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-44,37,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[37] = new State(new int[]{139,38,140,61,62,-139,60,-139,141,-139,142,-139,143,-139,144,-139,38,-139,94,-139,124,-139,145,-139,146,-139,63,-139,93,-139,44,-139,41,-139,58,-139,59,-139});
    states[38] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-45,39,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[39] = new State(new int[]{43,40,45,63,139,-144,140,-144,62,-144,60,-144,141,-144,142,-144,143,-144,144,-144,38,-144,94,-144,124,-144,145,-144,146,-144,63,-144,93,-144,44,-144,41,-144,58,-144,59,-144});
    states[40] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-46,41,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[41] = new State(new int[]{42,42,47,65,37,86,43,-147,45,-147,139,-147,140,-147,62,-147,60,-147,141,-147,142,-147,143,-147,144,-147,38,-147,94,-147,124,-147,145,-147,146,-147,63,-147,93,-147,44,-147,41,-147,58,-147,59,-147});
    states[42] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-36,43,-31,44,-34,45,-38,67,-35,90});
    states[43] = new State(-150);
    states[44] = new State(-121);
    states[45] = new State(new int[]{91,46,40,133,137,140,138,141,42,-88,47,-88,37,-88,43,-88,45,-88,139,-88,140,-88,62,-88,60,-88,141,-88,142,-88,143,-88,144,-88,38,-88,94,-88,124,-88,145,-88,146,-88,63,-88,93,-88,44,-88,41,-88,58,-88,59,-88,155,-88,61,-88,147,-88,148,-88,149,-88,150,-88,151,-88,152,-88,153,-88,154,-88,156,-88,157,-88});
    states[46] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,47,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[47] = new State(new int[]{93,48,44,49});
    states[48] = new State(-110);
    states[49] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-23,50,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[50] = new State(-70);
    states[51] = new State(-64);
    states[52] = new State(new int[]{145,26,146,-67,63,-67,93,-67,44,-67,41,-67,58,-67,59,-67});
    states[53] = new State(new int[]{124,28,145,-107,146,-107,63,-107,93,-107,44,-107,41,-107,58,-107,59,-107});
    states[54] = new State(new int[]{94,30,124,-127,145,-127,146,-127,63,-127,93,-127,44,-127,41,-127,58,-127,59,-127});
    states[55] = new State(new int[]{38,32,94,-131,124,-131,145,-131,146,-131,63,-131,93,-131,44,-131,41,-131,58,-131,59,-131});
    states[56] = new State(new int[]{143,34,144,57,38,-133,94,-133,124,-133,145,-133,146,-133,63,-133,93,-133,44,-133,41,-133,58,-133,59,-133});
    states[57] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-43,58,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[58] = new State(new int[]{62,36,60,59,141,82,142,131,143,-137,144,-137,38,-137,94,-137,124,-137,145,-137,146,-137,63,-137,93,-137,44,-137,41,-137,58,-137,59,-137});
    states[59] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-44,60,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[60] = new State(new int[]{139,38,140,61,62,-140,60,-140,141,-140,142,-140,143,-140,144,-140,38,-140,94,-140,124,-140,145,-140,146,-140,63,-140,93,-140,44,-140,41,-140,58,-140,59,-140});
    states[61] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-45,62,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[62] = new State(new int[]{43,40,45,63,139,-145,140,-145,62,-145,60,-145,141,-145,142,-145,143,-145,144,-145,38,-145,94,-145,124,-145,145,-145,146,-145,63,-145,93,-145,44,-145,41,-145,58,-145,59,-145});
    states[63] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-46,64,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[64] = new State(new int[]{42,42,47,65,37,86,43,-148,45,-148,139,-148,140,-148,62,-148,60,-148,141,-148,142,-148,143,-148,144,-148,38,-148,94,-148,124,-148,145,-148,146,-148,63,-148,93,-148,44,-148,41,-148,58,-148,59,-148});
    states[65] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-36,66,-31,44,-34,45,-38,67,-35,90});
    states[66] = new State(-151);
    states[67] = new State(-109);
    states[68] = new State(-123);
    states[69] = new State(-124);
    states[70] = new State(-125);
    states[71] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,170,103,164,104,165,105,166,106,167,107,168,108},new int[]{-25,72,-12,74,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[72] = new State(new int[]{41,73,44,49});
    states[73] = new State(-126);
    states[74] = new State(new int[]{41,75});
    states[75] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-36,76,-31,44,-34,45,-38,67,-35,90});
    states[76] = new State(-122);
    states[77] = new State(new int[]{130,68,131,69,132,70,40,79,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-31,78,-34,45,-38,67,-35,90});
    states[78] = new State(-89);
    states[79] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,72,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[80] = new State(-69);
    states[81] = new State(new int[]{62,36,60,59,141,82,142,131,143,-135,144,-135,38,-135,94,-135,124,-135,145,-135,146,-135,63,-135,93,-135,44,-135,41,-135,58,-135,59,-135});
    states[82] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-44,83,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[83] = new State(new int[]{139,38,140,61,62,-141,60,-141,141,-141,142,-141,143,-141,144,-141,38,-141,94,-141,124,-141,145,-141,146,-141,63,-141,93,-141,44,-141,41,-141,58,-141,59,-141});
    states[84] = new State(new int[]{43,40,45,63,139,-143,140,-143,62,-143,60,-143,141,-143,142,-143,143,-143,144,-143,38,-143,94,-143,124,-143,145,-143,146,-143,63,-143,93,-143,44,-143,41,-143,58,-143,59,-143});
    states[85] = new State(new int[]{42,42,47,65,37,86,43,-146,45,-146,139,-146,140,-146,62,-146,60,-146,141,-146,142,-146,143,-146,144,-146,38,-146,94,-146,124,-146,145,-146,146,-146,63,-146,93,-146,44,-146,41,-146,58,-146,59,-146});
    states[86] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-36,87,-31,44,-34,45,-38,67,-35,90});
    states[87] = new State(-152);
    states[88] = new State(new int[]{130,68,131,69,132,70,40,79,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-31,89,-34,45,-38,67,-35,90});
    states[89] = new State(-90);
    states[90] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-36,91,-31,44,-34,45,-38,67,-35,90});
    states[91] = new State(-91);
    states[92] = new State(-115);
    states[93] = new State(-116);
    states[94] = new State(-117);
    states[95] = new State(-118);
    states[96] = new State(-119);
    states[97] = new State(-120);
    states[98] = new State(new int[]{40,100,130,68,131,69,132,70,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-31,99,-34,45,-38,67,-35,90});
    states[99] = new State(-92);
    states[100] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-12,101,-25,72,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[101] = new State(new int[]{41,102});
    states[102] = new State(-93);
    states[103] = new State(-35);
    states[104] = new State(-36);
    states[105] = new State(-37);
    states[106] = new State(-38);
    states[107] = new State(-39);
    states[108] = new State(-40);
    states[109] = new State(new int[]{139,38,140,61,62,-138,60,-138,141,-138,142,-138,143,-138,144,-138,38,-138,94,-138,124,-138,145,-138,146,-138,63,-138,93,-138,44,-138,41,-138,58,-138,59,-138});
    states[110] = new State(-149);
    states[111] = new State(new int[]{155,118,61,120,147,121,148,122,149,123,150,124,151,125,152,126,153,127,154,128,156,129,157,130,42,-121,47,-121,37,-121,43,-121,45,-121,139,-121,140,-121,62,-121,60,-121,141,-121,142,-121,143,-121,144,-121,38,-121,94,-121,124,-121,145,-121,146,-121,63,-121,93,-121,44,-121,41,-121,58,-121,59,-121},new int[]{-32,112});
    states[112] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-23,113,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[113] = new State(-65);
    states[114] = new State(new int[]{130,68,131,69,132,70,40,79,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-31,115,-34,45,-38,67,-35,90});
    states[115] = new State(-94);
    states[116] = new State(new int[]{130,68,131,69,132,70,40,79,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-31,117,-34,45,-38,67,-35,90});
    states[117] = new State(-95);
    states[118] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-23,119,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[119] = new State(-66);
    states[120] = new State(-96);
    states[121] = new State(-97);
    states[122] = new State(-98);
    states[123] = new State(-99);
    states[124] = new State(-100);
    states[125] = new State(-101);
    states[126] = new State(-102);
    states[127] = new State(-103);
    states[128] = new State(-104);
    states[129] = new State(-105);
    states[130] = new State(-106);
    states[131] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-44,132,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[132] = new State(new int[]{139,38,140,61,62,-142,60,-142,141,-142,142,-142,143,-142,144,-142,38,-142,94,-142,124,-142,145,-142,146,-142,63,-142,93,-142,44,-142,41,-142,58,-142,59,-142});
    states[133] = new State(new int[]{41,134,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-39,135,-23,139,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[134] = new State(-111);
    states[135] = new State(new int[]{41,136,44,137});
    states[136] = new State(-112);
    states[137] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-23,138,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[138] = new State(-130);
    states[139] = new State(-129);
    states[140] = new State(-113);
    states[141] = new State(-114);
    states[142] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,143,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[143] = new State(new int[]{58,144,44,49});
    states[144] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-21,145,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[145] = new State(-57);
    states[146] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-19,147,-23,148,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[147] = new State(-45);
    states[148] = new State(-53);
    states[149] = new State(new int[]{40,150,91,-21,61,-21,170,-21,164,-21,165,-21,166,-21,167,-21,168,-21,169,-21,171,-21,178,-21,128,-21,123,-21,59,-21,44,-21,41,-21});
    states[150] = new State(new int[]{41,171,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,130,173},new int[]{-15,151,-16,167,-20,172,-7,155,-12,160,-13,162});
    states[151] = new State(new int[]{41,152,44,153});
    states[152] = new State(-23);
    states[153] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-20,154,-7,155,-12,160,-13,162});
    states[154] = new State(-47);
    states[155] = new State(new int[]{130,149,40,157,41,-55,44,-55},new int[]{-9,156});
    states[156] = new State(new int[]{91,19,41,-54,44,-54});
    states[157] = new State(new int[]{130,149,40,157},new int[]{-9,158});
    states[158] = new State(new int[]{41,159,91,19});
    states[159] = new State(-22);
    states[160] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,59,-15,130,-15,40,-15,41,-15,44,-15},new int[]{-7,161,-12,160,-13,162});
    states[161] = new State(-16);
    states[162] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,59,-17,130,-17,40,-17,41,-17,44,-17},new int[]{-7,163,-12,160,-13,162});
    states[163] = new State(-18);
    states[164] = new State(-41);
    states[165] = new State(-42);
    states[166] = new State(-43);
    states[167] = new State(new int[]{41,168,44,169});
    states[168] = new State(-24);
    states[169] = new State(new int[]{130,170});
    states[170] = new State(-49);
    states[171] = new State(-25);
    states[172] = new State(-46);
    states[173] = new State(-48);
    states[174] = new State(-19);
    states[175] = new State(new int[]{125,176,130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,254,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-18,177,-10,248,-22,253,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227,-5,256,-7,12,-12,160,-13,162});
    states[176] = new State(-31);
    states[177] = new State(new int[]{125,178,130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,179,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[178] = new State(-32);
    states[179] = new State(-52);
    states[180] = new State(-58);
    states[181] = new State(new int[]{58,182,91,-123,40,-123,137,-123,138,-123,155,-123,61,-123,147,-123,148,-123,149,-123,150,-123,151,-123,152,-123,153,-123,154,-123,156,-123,157,-123,42,-123,47,-123,37,-123,43,-123,45,-123,139,-123,140,-123,62,-123,60,-123,141,-123,142,-123,143,-123,144,-123,38,-123,94,-123,124,-123,145,-123,146,-123,63,-123,59,-123,44,-123});
    states[182] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,183,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[183] = new State(-71);
    states[184] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-17,185,-21,22,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,44,-34,45,-38,67,-35,90});
    states[185] = new State(new int[]{58,186});
    states[186] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,187,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[187] = new State(-72);
    states[188] = new State(new int[]{58,189});
    states[189] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,190,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[190] = new State(-73);
    states[191] = new State(-59);
    states[192] = new State(-74);
    states[193] = new State(new int[]{59,194,44,49});
    states[194] = new State(-75);
    states[195] = new State(-60);
    states[196] = new State(new int[]{40,197});
    states[197] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,198,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[198] = new State(new int[]{41,199,44,49});
    states[199] = new State(new int[]{123,175},new int[]{-11,200});
    states[200] = new State(new int[]{180,201,125,-76,130,-76,176,-76,177,-76,59,-76,131,-76,132,-76,40,-76,137,-76,138,-76,38,-76,42,-76,43,-76,45,-76,126,-76,33,-76,133,-76,134,-76,135,-76,179,-76,181,-76,182,-76,183,-76,184,-76,185,-76,186,-76,187,-76,188,-76,128,-76});
    states[201] = new State(new int[]{123,175},new int[]{-11,202});
    states[202] = new State(-77);
    states[203] = new State(new int[]{40,204});
    states[204] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,205,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[205] = new State(new int[]{41,206,44,49});
    states[206] = new State(new int[]{123,175},new int[]{-11,207});
    states[207] = new State(-78);
    states[208] = new State(-61);
    states[209] = new State(new int[]{40,210});
    states[210] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,211,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[211] = new State(new int[]{41,212,44,49});
    states[212] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,213,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[213] = new State(-79);
    states[214] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,215,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[215] = new State(new int[]{182,216});
    states[216] = new State(new int[]{40,217});
    states[217] = new State(new int[]{130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,218,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[218] = new State(new int[]{41,219,44,49});
    states[219] = new State(new int[]{59,220});
    states[220] = new State(-80);
    states[221] = new State(new int[]{40,222});
    states[222] = new State(new int[]{59,192,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-27,223,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[223] = new State(new int[]{59,192,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-27,224,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[224] = new State(new int[]{41,225,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,245,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[225] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,226,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[226] = new State(-81);
    states[227] = new State(-62);
    states[228] = new State(new int[]{130,229});
    states[229] = new State(new int[]{59,230});
    states[230] = new State(-83);
    states[231] = new State(new int[]{59,232});
    states[232] = new State(-84);
    states[233] = new State(new int[]{59,234});
    states[234] = new State(-85);
    states[235] = new State(new int[]{59,236,130,68,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116},new int[]{-25,237,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90});
    states[236] = new State(-86);
    states[237] = new State(new int[]{59,238,44,49});
    states[238] = new State(-87);
    states[239] = new State(new int[]{59,241,41,242,123,243,125,244},new int[]{-6,240});
    states[240] = new State(-63);
    states[241] = new State(-11);
    states[242] = new State(-12);
    states[243] = new State(-13);
    states[244] = new State(-14);
    states[245] = new State(new int[]{41,246,44,49});
    states[246] = new State(new int[]{130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,247,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[247] = new State(-82);
    states[248] = new State(new int[]{125,249,128,252,130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-18,250,-5,9,-22,253,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227,-7,12,-12,160,-13,162});
    states[249] = new State(-33);
    states[250] = new State(new int[]{125,251,130,181,176,184,177,188,59,192,131,69,132,70,40,71,137,77,138,88,38,92,42,93,43,94,45,95,126,96,33,97,133,98,134,114,135,116,179,196,181,203,182,209,183,214,184,221,185,228,186,231,187,233,188,235,128,239},new int[]{-22,179,-26,180,-27,191,-25,193,-23,80,-21,51,-24,23,-33,52,-37,53,-40,54,-41,55,-42,56,-43,81,-44,109,-45,84,-46,85,-36,110,-31,111,-34,45,-38,67,-35,90,-28,195,-29,208,-30,227});
    states[251] = new State(-34);
    states[252] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166,59,241,41,242,123,243,125,244},new int[]{-5,11,-6,240,-7,12,-12,160,-13,162});
    states[253] = new State(-51);
    states[254] = new State(new int[]{59,241,41,242,123,243,125,244,170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-6,240,-5,255,-7,12,-12,160,-13,162});
    states[255] = new State(-29);
    states[256] = new State(-27);
    states[257] = new State(-10);
    states[258] = new State(new int[]{170,103,164,104,165,105,166,106,167,107,168,108,169,164,171,165,178,166},new int[]{-5,255,-7,12,-12,160,-13,162});
    states[259] = new State(-5);
    states[260] = new State(new int[]{59,241,41,242,123,243,125,244},new int[]{-6,261});
    states[261] = new State(-6);
    states[262] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{128,-6});
    rules[7] = new Rule(-5, new int[]{-7,59});
    rules[8] = new Rule(-5, new int[]{-7,-8,59});
    rules[9] = new Rule(-4, new int[]{-7,-9,-10,-11});
    rules[10] = new Rule(-4, new int[]{-7,-9,-11});
    rules[11] = new Rule(-6, new int[]{59});
    rules[12] = new Rule(-6, new int[]{41});
    rules[13] = new Rule(-6, new int[]{123});
    rules[14] = new Rule(-6, new int[]{125});
    rules[15] = new Rule(-7, new int[]{-12});
    rules[16] = new Rule(-7, new int[]{-12,-7});
    rules[17] = new Rule(-7, new int[]{-13});
    rules[18] = new Rule(-7, new int[]{-13,-7});
    rules[19] = new Rule(-8, new int[]{-14});
    rules[20] = new Rule(-8, new int[]{-8,44,-14});
    rules[21] = new Rule(-9, new int[]{130});
    rules[22] = new Rule(-9, new int[]{40,-9,41});
    rules[23] = new Rule(-9, new int[]{130,40,-15,41});
    rules[24] = new Rule(-9, new int[]{130,40,-16,41});
    rules[25] = new Rule(-9, new int[]{130,40,41});
    rules[26] = new Rule(-9, new int[]{-9,91,-17,93});
    rules[27] = new Rule(-10, new int[]{-5});
    rules[28] = new Rule(-10, new int[]{-10,-5});
    rules[29] = new Rule(-10, new int[]{128,-5});
    rules[30] = new Rule(-10, new int[]{-10,128,-5});
    rules[31] = new Rule(-11, new int[]{123,125});
    rules[32] = new Rule(-11, new int[]{123,-18,125});
    rules[33] = new Rule(-11, new int[]{123,-10,125});
    rules[34] = new Rule(-11, new int[]{123,-10,-18,125});
    rules[35] = new Rule(-12, new int[]{170});
    rules[36] = new Rule(-12, new int[]{164});
    rules[37] = new Rule(-12, new int[]{165});
    rules[38] = new Rule(-12, new int[]{166});
    rules[39] = new Rule(-12, new int[]{167});
    rules[40] = new Rule(-12, new int[]{168});
    rules[41] = new Rule(-13, new int[]{169});
    rules[42] = new Rule(-13, new int[]{171});
    rules[43] = new Rule(-13, new int[]{178});
    rules[44] = new Rule(-14, new int[]{-9});
    rules[45] = new Rule(-14, new int[]{-9,61,-19});
    rules[46] = new Rule(-15, new int[]{-20});
    rules[47] = new Rule(-15, new int[]{-15,44,-20});
    rules[48] = new Rule(-16, new int[]{130});
    rules[49] = new Rule(-16, new int[]{-16,44,130});
    rules[50] = new Rule(-17, new int[]{-21});
    rules[51] = new Rule(-18, new int[]{-22});
    rules[52] = new Rule(-18, new int[]{-18,-22});
    rules[53] = new Rule(-19, new int[]{-23});
    rules[54] = new Rule(-20, new int[]{-7,-9});
    rules[55] = new Rule(-20, new int[]{-7});
    rules[56] = new Rule(-21, new int[]{-24});
    rules[57] = new Rule(-21, new int[]{-24,63,-25,58,-21});
    rules[58] = new Rule(-22, new int[]{-26});
    rules[59] = new Rule(-22, new int[]{-27});
    rules[60] = new Rule(-22, new int[]{-28});
    rules[61] = new Rule(-22, new int[]{-29});
    rules[62] = new Rule(-22, new int[]{-30});
    rules[63] = new Rule(-22, new int[]{128,-6});
    rules[64] = new Rule(-23, new int[]{-21});
    rules[65] = new Rule(-23, new int[]{-31,-32,-23});
    rules[66] = new Rule(-23, new int[]{-31,155,-23});
    rules[67] = new Rule(-24, new int[]{-33});
    rules[68] = new Rule(-24, new int[]{-24,146,-33});
    rules[69] = new Rule(-25, new int[]{-23});
    rules[70] = new Rule(-25, new int[]{-25,44,-23});
    rules[71] = new Rule(-26, new int[]{130,58,-22});
    rules[72] = new Rule(-26, new int[]{176,-17,58,-22});
    rules[73] = new Rule(-26, new int[]{177,58,-22});
    rules[74] = new Rule(-27, new int[]{59});
    rules[75] = new Rule(-27, new int[]{-25,59});
    rules[76] = new Rule(-28, new int[]{179,40,-25,41,-11});
    rules[77] = new Rule(-28, new int[]{179,40,-25,41,-11,180,-11});
    rules[78] = new Rule(-28, new int[]{181,40,-25,41,-11});
    rules[79] = new Rule(-29, new int[]{182,40,-25,41,-22});
    rules[80] = new Rule(-29, new int[]{183,-22,182,40,-25,41,59});
    rules[81] = new Rule(-29, new int[]{184,40,-27,-27,41,-22});
    rules[82] = new Rule(-29, new int[]{184,40,-27,-27,-25,41,-22});
    rules[83] = new Rule(-30, new int[]{185,130,59});
    rules[84] = new Rule(-30, new int[]{186,59});
    rules[85] = new Rule(-30, new int[]{187,59});
    rules[86] = new Rule(-30, new int[]{188,59});
    rules[87] = new Rule(-30, new int[]{188,-25,59});
    rules[88] = new Rule(-31, new int[]{-34});
    rules[89] = new Rule(-31, new int[]{137,-31});
    rules[90] = new Rule(-31, new int[]{138,-31});
    rules[91] = new Rule(-31, new int[]{-35,-36});
    rules[92] = new Rule(-31, new int[]{133,-31});
    rules[93] = new Rule(-31, new int[]{133,40,-12,41});
    rules[94] = new Rule(-31, new int[]{134,-31});
    rules[95] = new Rule(-31, new int[]{135,-31});
    rules[96] = new Rule(-32, new int[]{61});
    rules[97] = new Rule(-32, new int[]{147});
    rules[98] = new Rule(-32, new int[]{148});
    rules[99] = new Rule(-32, new int[]{149});
    rules[100] = new Rule(-32, new int[]{150});
    rules[101] = new Rule(-32, new int[]{151});
    rules[102] = new Rule(-32, new int[]{152});
    rules[103] = new Rule(-32, new int[]{153});
    rules[104] = new Rule(-32, new int[]{154});
    rules[105] = new Rule(-32, new int[]{156});
    rules[106] = new Rule(-32, new int[]{157});
    rules[107] = new Rule(-33, new int[]{-37});
    rules[108] = new Rule(-33, new int[]{-33,145,-37});
    rules[109] = new Rule(-34, new int[]{-38});
    rules[110] = new Rule(-34, new int[]{-34,91,-25,93});
    rules[111] = new Rule(-34, new int[]{-34,40,41});
    rules[112] = new Rule(-34, new int[]{-34,40,-39,41});
    rules[113] = new Rule(-34, new int[]{-34,137});
    rules[114] = new Rule(-34, new int[]{-34,138});
    rules[115] = new Rule(-35, new int[]{38});
    rules[116] = new Rule(-35, new int[]{42});
    rules[117] = new Rule(-35, new int[]{43});
    rules[118] = new Rule(-35, new int[]{45});
    rules[119] = new Rule(-35, new int[]{126});
    rules[120] = new Rule(-35, new int[]{33});
    rules[121] = new Rule(-36, new int[]{-31});
    rules[122] = new Rule(-36, new int[]{40,-12,41,-36});
    rules[123] = new Rule(-38, new int[]{130});
    rules[124] = new Rule(-38, new int[]{131});
    rules[125] = new Rule(-38, new int[]{132});
    rules[126] = new Rule(-38, new int[]{40,-25,41});
    rules[127] = new Rule(-37, new int[]{-40});
    rules[128] = new Rule(-37, new int[]{-37,124,-40});
    rules[129] = new Rule(-39, new int[]{-23});
    rules[130] = new Rule(-39, new int[]{-39,44,-23});
    rules[131] = new Rule(-40, new int[]{-41});
    rules[132] = new Rule(-40, new int[]{-40,94,-41});
    rules[133] = new Rule(-41, new int[]{-42});
    rules[134] = new Rule(-41, new int[]{-41,38,-42});
    rules[135] = new Rule(-42, new int[]{-43});
    rules[136] = new Rule(-42, new int[]{-42,143,-43});
    rules[137] = new Rule(-42, new int[]{-42,144,-43});
    rules[138] = new Rule(-43, new int[]{-44});
    rules[139] = new Rule(-43, new int[]{-43,62,-44});
    rules[140] = new Rule(-43, new int[]{-43,60,-44});
    rules[141] = new Rule(-43, new int[]{-43,141,-44});
    rules[142] = new Rule(-43, new int[]{-43,142,-44});
    rules[143] = new Rule(-44, new int[]{-45});
    rules[144] = new Rule(-44, new int[]{-44,139,-45});
    rules[145] = new Rule(-44, new int[]{-44,140,-45});
    rules[146] = new Rule(-45, new int[]{-46});
    rules[147] = new Rule(-45, new int[]{-45,43,-46});
    rules[148] = new Rule(-45, new int[]{-45,45,-46});
    rules[149] = new Rule(-46, new int[]{-36});
    rules[150] = new Rule(-46, new int[]{-46,42,-36});
    rules[151] = new Rule(-46, new int[]{-46,47,-36});
    rules[152] = new Rule(-46, new int[]{-46,37,-36});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // translation_unit -> external_declaration
{ CurrentSemanticValue = new TranslationUnitSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 3: // translation_unit -> translation_unit, external_declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                   SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 4: // external_declaration -> function_definition
{ CurrentSemanticValue = new ExternalDeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 5: // external_declaration -> declaration
{ CurrentSemanticValue = new ExternalDeclarationSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 6: // external_declaration -> error, error_end
{ CurrentSemanticValue = new ExternalDeclarationSTN(3, n_linecnt); this.yyerrok(); }
        break;
      case 7: // declaration -> declaration_specifiers, ';'
{ CurrentSemanticValue = new DeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }    ); }
        break;
      case 8: // declaration -> declaration_specifiers, init_declarator_list, ';'
{ CurrentSemanticValue = new DeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 9: // function_definition -> declaration_specifiers, direct_declarator, 
              //                        declaration_list, compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 10: // function_definition -> declaration_specifiers, direct_declarator, 
               //                        compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 11: // error_end -> ';'
{ ; }
        break;
      case 12: // error_end -> ')'
{ ; }
        break;
      case 13: // error_end -> '{'
{ ; }
        break;
      case 14: // error_end -> '}'
{ ; }
        break;
      case 15: // declaration_specifiers -> type_specifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 16: // declaration_specifiers -> type_specifier, declaration_specifiers
{ ValueStack[ValueStack.Depth-1].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-1];                             }
        break;
      case 17: // declaration_specifiers -> type_qualifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 18: // declaration_specifiers -> type_qualifier, declaration_specifiers
{ ValueStack[ValueStack.Depth-1].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-1];                             }
        break;
      case 19: // init_declarator_list -> init_declarator
{ CurrentSemanticValue = new InitDeclaratorListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 20: // init_declarator_list -> init_declarator_list, ',', init_declarator
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                      }
        break;
      case 21: // direct_declarator -> IDENTIFIER
{ CurrentSemanticValue = new DirectDeclaratorSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt)     });                                  }
        break;
      case 22: // direct_declarator -> '(', direct_declarator, ')'
{ CurrentSemanticValue = new DirectDeclaratorSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3]                                  }); }
        break;
      case 23: // direct_declarator -> IDENTIFIER, '(', parameter_list, ')'
{ CurrentSemanticValue = new DirectDeclaratorSTN(3, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt), ValueStack[ValueStack.Depth-2] }); }
        break;
      case 24: // direct_declarator -> IDENTIFIER, '(', identifier_list, ')'
{ CurrentSemanticValue = new DirectDeclaratorSTN(4, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt), ValueStack[ValueStack.Depth-2] }); }
        break;
      case 25: // direct_declarator -> IDENTIFIER, '(', ')'
{ CurrentSemanticValue = new DirectDeclaratorSTN(5, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt)     }); }
        break;
      case 26: // direct_declarator -> direct_declarator, '[', constant_expression, ']'
{ CurrentSemanticValue = new DirectDeclaratorSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]                              }); }
        break;
      case 27: // declaration_list -> declaration
{ CurrentSemanticValue = new DeclarationListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 28: // declaration_list -> declaration_list, declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                   }
        break;
      case 29: // declaration_list -> error, declaration
{ CurrentSemanticValue = new DeclarationListSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 30: // declaration_list -> declaration_list, error, declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                   }
        break;
      case 31: // compound_statement -> '{', '}'
{ CurrentSemanticValue = new CompoundStatementSTN(1, n_linecnt);                                  }
        break;
      case 32: // compound_statement -> '{', statement_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 33: // compound_statement -> '{', declaration_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 34: // compound_statement -> '{', declaration_list, statement_list, '}'
{ CurrentSemanticValue = new CompoundStatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 35: // type_specifier -> VOID
{ CurrentSemanticValue = new TypeSpecifierSTN(1, n_linecnt, "void");     }
        break;
      case 36: // type_specifier -> BYTE
{ CurrentSemanticValue = new TypeSpecifierSTN(2, n_linecnt, "byte");     }
        break;
      case 37: // type_specifier -> WORD
{ CurrentSemanticValue = new TypeSpecifierSTN(3, n_linecnt, "word");     }
        break;
      case 38: // type_specifier -> LONGWORD
{ CurrentSemanticValue = new TypeSpecifierSTN(4, n_linecnt, "longword"); }
        break;
      case 39: // type_specifier -> SIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(5, n_linecnt, "signed");   }
        break;
      case 40: // type_specifier -> UNSIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(6, n_linecnt, "unsigned"); }
        break;
      case 41: // type_qualifier -> CONST
{ CurrentSemanticValue = new TypeQualifierSTN(1, n_linecnt, "const");     }
        break;
      case 42: // type_qualifier -> VOLATILE
{ CurrentSemanticValue = new TypeQualifierSTN(2, n_linecnt, "volatile");  }
        break;
      case 43: // type_qualifier -> INTERRUPT
{ CurrentSemanticValue = new TypeQualifierSTN(3, n_linecnt, "interrupt"); }
        break;
      case 44: // init_declarator -> direct_declarator
{ CurrentSemanticValue = new InitDeclaratorSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 45: // init_declarator -> direct_declarator, '=', initializer
{ CurrentSemanticValue = new InitDeclaratorSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 46: // parameter_list -> parameter_declaration
{ CurrentSemanticValue = new ParameterListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 47: // parameter_list -> parameter_list, ',', parameter_declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                 }
        break;
      case 48: // identifier_list -> IDENTIFIER
{ CurrentSemanticValue = new IdentifierListSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); }
        break;
      case 49: // identifier_list -> identifier_list, ',', IDENTIFIER
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                  }
        break;
      case 50: // constant_expression -> conditional_expression
{ CurrentSemanticValue = new ConstantExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 51: // statement_list -> statement
{ CurrentSemanticValue = new StatementListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 52: // statement_list -> statement_list, statement
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                 }
        break;
      case 53: // initializer -> assignment_expression
{ CurrentSemanticValue = new InitializerSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 54: // parameter_declaration -> declaration_specifiers, direct_declarator
{ CurrentSemanticValue = new ParameterDeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 55: // parameter_declaration -> declaration_specifiers
{ CurrentSemanticValue = new ParameterDeclarationSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 56: // conditional_expression -> logical_or_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 57: // conditional_expression -> logical_or_expression, '?', expression, ':', 
               //                           conditional_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 58: // statement -> labeled_statement
{ CurrentSemanticValue = new StatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 59: // statement -> expression_statement
{ CurrentSemanticValue = new StatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 60: // statement -> selection_statement
{ CurrentSemanticValue = new StatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 61: // statement -> iteration_statement
{ CurrentSemanticValue = new StatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 62: // statement -> jump_statement
{ CurrentSemanticValue = new StatementSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 63: // statement -> error, error_end
{ CurrentSemanticValue = new StatementSTN(6, n_linecnt, new SyntaxTreeNode[] {    }); }
        break;
      case 64: // assignment_expression -> conditional_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 65: // assignment_expression -> unary_expression, assignment_operator, 
               //                          assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 66: // assignment_expression -> unary_expression, LEFT_ARROW, assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 67: // logical_or_expression -> logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 68: // logical_or_expression -> logical_or_expression, OR_OP, logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 69: // expression -> assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 70: // expression -> expression, ',', assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 71: // labeled_statement -> IDENTIFIER, ':', statement
{ CurrentSemanticValue = new LabeledStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt), ValueStack[ValueStack.Depth-1] }); }
        break;
      case 72: // labeled_statement -> CASE, constant_expression, ':', statement
{ CurrentSemanticValue = new LabeledStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]                              }); }
        break;
      case 73: // labeled_statement -> DEFAULT, ':', statement
{ CurrentSemanticValue = new LabeledStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]                                  }); }
        break;
      case 74: // expression_statement -> ';'
{ CurrentSemanticValue = new ExpressionStatementSTN(1, n_linecnt);                              }
        break;
      case 75: // expression_statement -> expression, ';'
{ CurrentSemanticValue = new ExpressionStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); }
        break;
      case 76: // selection_statement -> IF, '(', expression, ')', compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 77: // selection_statement -> IF, '(', expression, ')', compound_statement, ELSE, 
               //                        compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 78: // selection_statement -> SWITCH, '(', expression, ')', compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 79: // iteration_statement -> WHILE, '(', expression, ')', statement
{ CurrentSemanticValue = new IterationStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 80: // iteration_statement -> DO, statement, WHILE, '(', expression, ')', ';'
{ CurrentSemanticValue = new IterationStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-3]         }); }
        break;
      case 81: // iteration_statement -> FOR, '(', expression_statement, expression_statement, 
               //                        ')', statement
{ CurrentSemanticValue = new IterationStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 82: // iteration_statement -> FOR, '(', expression_statement, expression_statement, 
               //                        expression, ')', statement
{ CurrentSemanticValue = new IterationStatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 83: // jump_statement -> GOTO, IDENTIFIER, ';'
{ CurrentSemanticValue = new JumpStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); }
        break;
      case 84: // jump_statement -> CONTINUE, ';'
{ CurrentSemanticValue = new JumpStatementSTN(3, n_linecnt);                                                           }
        break;
      case 85: // jump_statement -> BREAK, ';'
{ CurrentSemanticValue = new JumpStatementSTN(4, n_linecnt);                                                           }
        break;
      case 86: // jump_statement -> RETURN, ';'
{ CurrentSemanticValue = new JumpStatementSTN(5, n_linecnt);                                                           }
        break;
      case 87: // jump_statement -> RETURN, expression, ';'
{ CurrentSemanticValue = new JumpStatementSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                              }); }
        break;
      case 88: // unary_expression -> postfix_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 89: // unary_expression -> INC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 90: // unary_expression -> DEC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 91: // unary_expression -> unary_operator, cast_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 92: // unary_expression -> SIZEOF, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 93: // unary_expression -> SIZEOF, '(', type_specifier, ')'
{ CurrentSemanticValue = new UnaryExpressionSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 94: // unary_expression -> LOBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(7, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 95: // unary_expression -> HIBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(8, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 96: // assignment_operator -> '='
{ CurrentSemanticValue = new AssignmentOperatorSTN( 1, n_linecnt); }
        break;
      case 97: // assignment_operator -> MUL_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 2, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 98: // assignment_operator -> DIV_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 3, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 99: // assignment_operator -> MOD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 4, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 100: // assignment_operator -> ADD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 5, n_linecnt); }
        break;
      case 101: // assignment_operator -> SUB_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 6, n_linecnt); }
        break;
      case 102: // assignment_operator -> LEFT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 7, n_linecnt); }
        break;
      case 103: // assignment_operator -> RIGHT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 8, n_linecnt); }
        break;
      case 104: // assignment_operator -> AND_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 9, n_linecnt); }
        break;
      case 105: // assignment_operator -> XOR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(10, n_linecnt); }
        break;
      case 106: // assignment_operator -> OR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(11, n_linecnt); }
        break;
      case 107: // logical_and_expression -> inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 108: // logical_and_expression -> logical_and_expression, AND_OP, 
                //                           inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 109: // postfix_expression -> primary_expression
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 110: // postfix_expression -> postfix_expression, '[', expression, ']'
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 111: // postfix_expression -> postfix_expression, '(', ')'
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3]     }); }
        break;
      case 112: // postfix_expression -> postfix_expression, '(', argument_expression_list, ')'
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 113: // postfix_expression -> postfix_expression, INC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 114: // postfix_expression -> postfix_expression, DEC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 115: // unary_operator -> '&'
{ CurrentSemanticValue = new UnaryOperatorSTN(1, n_linecnt); }
        break;
      case 116: // unary_operator -> '*'
{ CurrentSemanticValue = new UnaryOperatorSTN(2, n_linecnt); }
        break;
      case 117: // unary_operator -> '+'
{ CurrentSemanticValue = new UnaryOperatorSTN(3, n_linecnt); }
        break;
      case 118: // unary_operator -> '-'
{ CurrentSemanticValue = new UnaryOperatorSTN(4, n_linecnt); }
        break;
      case 119: // unary_operator -> '~'
{ CurrentSemanticValue = new UnaryOperatorSTN(5, n_linecnt); }
        break;
      case 120: // unary_operator -> '!'
{ CurrentSemanticValue = new UnaryOperatorSTN(6, n_linecnt); }
        break;
      case 121: // cast_expression -> unary_expression
{ CurrentSemanticValue = new CastExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 122: // cast_expression -> '(', type_specifier, ')', cast_expression
{ CurrentSemanticValue = new CastExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 123: // primary_expression -> IDENTIFIER
{ CurrentSemanticValue = new PrimaryExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt)    }); }
        break;
      case 124: // primary_expression -> NUMBER_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { new NumberLiteralSTL(1, n_linecnt) }); }
        break;
      case 125: // primary_expression -> STRING_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { new StringLiteralSTL(1, n_linecnt) }); }
        break;
      case 126: // primary_expression -> '(', expression, ')'
{ CurrentSemanticValue = new PrimaryExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                 }); }
        break;
      case 127: // inclusive_or_expression -> exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 128: // inclusive_or_expression -> inclusive_or_expression, '|', 
                //                            exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 129: // argument_expression_list -> assignment_expression
{ CurrentSemanticValue = new ArgumentExpressionListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 130: // argument_expression_list -> argument_expression_list, ',', 
                //                             assignment_expression
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                          }
        break;
      case 131: // exclusive_or_expression -> and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 132: // exclusive_or_expression -> exclusive_or_expression, '^', and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 133: // and_expression -> equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 134: // and_expression -> and_expression, '&', equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 135: // equality_expression -> relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 136: // equality_expression -> equality_expression, EQ_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 137: // equality_expression -> equality_expression, NE_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 138: // relational_expression -> shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 139: // relational_expression -> relational_expression, '>', shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 140: // relational_expression -> relational_expression, '<', shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 141: // relational_expression -> relational_expression, LE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 142: // relational_expression -> relational_expression, GE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 143: // shift_expression -> additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 144: // shift_expression -> shift_expression, LEFT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 145: // shift_expression -> shift_expression, RIGHT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 146: // additive_expression -> multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 147: // additive_expression -> additive_expression, '+', multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 148: // additive_expression -> additive_expression, '-', multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 149: // multiplicative_expression -> cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     });                             }
        break;
      case 150: // multiplicative_expression -> multiplicative_expression, '*', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
      case 151: // multiplicative_expression -> multiplicative_expression, '/', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
      case 152: // multiplicative_expression -> multiplicative_expression, '%', cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
