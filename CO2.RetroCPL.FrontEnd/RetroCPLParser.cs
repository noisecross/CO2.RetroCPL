// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  NEUROLAPTOP
// DateTime: 04/01/2018 11:03:03
// UserName: Nekros
// Input file <RetroCPLParser.y - 04/01/2018 11:03:00>

// options: conflicts no-lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using CO2.RetroCPL.Commons;

namespace CO2.RetroCPL.FrontEnd
{
public enum Tokens {error=2,EOF=3,IDENTIFIER=4,NUMBER_LITERAL=5,STRING_LITERAL=6,
    SIZEOF=7,LOBYTE=8,HIBYTE=9,PTR_OP=10,INC_OP=11,DEC_OP=12,
    LEFT_OP=13,RIGHT_OP=14,LE_OP=15,GE_OP=16,EQ_OP=17,NE_OP=18,
    AND_OP=19,OR_OP=20,MUL_ASSIGN=21,DIV_ASSIGN=22,MOD_ASSIGN=23,ADD_ASSIGN=24,
    SUB_ASSIGN=25,LEFT_ASSIGN=26,RIGHT_ASSIGN=27,AND_ASSIGN=28,LEFT_ARROW=29,XOR_ASSIGN=30,
    OR_ASSIGN=31,TYPE_NAME=32,C_SC=33,C_OK=34,C_CK=35,C_CM=36,
    C_DP=37,C_ES=38,C_OP=39,C_CP=40,C_OB=41,C_CB=42,
    C_P=43,C_A=44,C_EM=45,C_NS=46,C_MS=47,C_PS=48,
    C_AK=49,C_SS=50,C_PC=51,C_LT=52,C_GT=53,C_UA=54,
    C_PP=55,C_QM=56,TYPEDEF=57,EXTERN=58,STATIC=59,AUTO=60,
    REGISTER=61,BYTE=62,WORD=63,LONGWORD=64,SIGNED=65,UNSIGNED=66,
    CONST=67,VOID=68,VOLATILE=69,STRUCT=70,UNION=71,ENUM=72,
    ELLIPSIS=73,CASE=74,DEFAULT=75,INTERRUPT=76,IF=77,ELSE=78,
    SWITCH=79,WHILE=80,DO=81,FOR=82,GOTO=83,CONTINUE=84,
    BREAK=85,RETURN=86};

// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<SyntaxTreeNode,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public SyntaxTreeNode yylval;
  public LexLocation yylloc;
  public ScanObj( int t, SyntaxTreeNode val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<SyntaxTreeNode, LexLocation>
{
  // Verbatim content from RetroCPLParser.y - 04/01/2018 11:03:00
	int n_linecnt
	{
		get
		{
			return ((Scanner)Scanner).helper.n_linecnt;
		}
	}

	//public StatementList program = new StatementList();
  // End verbatim content from RetroCPLParser.y - 04/01/2018 11:03:00

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[155];
  private static State[] states = new State[267];
  private static string[] nonTerms = new string[] {
      "translation_unit", "$accept", "external_declaration", "function_definition", 
      "declaration", "error_end", "declaration_specifiers", "init_declarator_list", 
      "direct_declarator", "declaration_list", "compound_statement", "type_specifier", 
      "type_qualifier", "init_declarator", "parameter_list", "identifier_list", 
      "constant_expression", "statement_list", "initializer", "parameter_declaration", 
      "conditional_expression", "statement", "assignment_expression", "logical_or_expression", 
      "expression", "labeled_statement", "expression_statement", "selection_statement", 
      "iteration_statement", "jump_statement", "unary_expression", "assignment_operator", 
      "logical_and_expression", "postfix_expression", "unary_operator", "cast_expression", 
      "inclusive_or_expression", "primary_expression", "argument_expression_list", 
      "exclusive_or_expression", "and_expression", "equality_expression", "relational_expression", 
      "shift_expression", "additive_expression", "multiplicative_expression", 
      };

  static Parser() {
    states[0] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,4,153,39,154,2,264},new int[]{-1,1,-3,266,-4,4,-7,5,-12,157,-13,159,-9,259,-5,263});
    states[1] = new State(new int[]{3,2,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,4,153,39,154,2,264},new int[]{-3,3,-4,4,-7,5,-12,157,-13,159,-9,259,-5,263});
    states[2] = new State(-1);
    states[3] = new State(-3);
    states[4] = new State(-4);
    states[5] = new State(new int[]{33,13,4,153,39,154},new int[]{-9,6,-8,14,-14,174});
    states[6] = new State(new int[]{39,19,41,26,38,171,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,2,258,34,175,33,-46,36,-46},new int[]{-10,7,-11,257,-5,256,-7,12,-12,157,-13,159});
    states[7] = new State(new int[]{2,10,34,175,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-11,8,-5,9,-7,12,-12,157,-13,159});
    states[8] = new State(-9);
    states[9] = new State(-30);
    states[10] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-5,11,-7,12,-12,157,-13,159});
    states[11] = new State(-32);
    states[12] = new State(new int[]{33,13,4,153,39,154},new int[]{-8,14,-14,174,-9,18});
    states[13] = new State(-7);
    states[14] = new State(new int[]{33,15,36,16});
    states[15] = new State(-8);
    states[16] = new State(new int[]{4,153,39,154},new int[]{-14,17,-9,18});
    states[17] = new State(-22);
    states[18] = new State(new int[]{39,19,41,26,38,171,33,-46,36,-46});
    states[19] = new State(new int[]{40,168,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,4,170},new int[]{-15,20,-16,164,-20,169,-7,24,-12,157,-13,159});
    states[20] = new State(new int[]{40,21,36,22});
    states[21] = new State(-25);
    states[22] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-20,23,-7,24,-12,157,-13,159});
    states[23] = new State(-49);
    states[24] = new State(new int[]{4,153,39,154,40,-57,36,-57},new int[]{-9,25});
    states[25] = new State(new int[]{39,19,41,26,40,-56,36,-56});
    states[26] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-17,27,-21,29,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[27] = new State(new int[]{42,28});
    states[28] = new State(-28);
    states[29] = new State(-52);
    states[30] = new State(new int[]{20,31,56,149,42,-58,36,-58,40,-58,37,-58,33,-58});
    states[31] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-33,32,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[32] = new State(new int[]{19,33,20,-70,56,-70,42,-70,36,-70,40,-70,37,-70,33,-70});
    states[33] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-37,34,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[34] = new State(new int[]{55,35,19,-110,20,-110,56,-110,42,-110,36,-110,40,-110,37,-110,33,-110});
    states[35] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-40,36,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[36] = new State(new int[]{54,37,55,-130,19,-130,20,-130,56,-130,42,-130,36,-130,40,-130,37,-130,33,-130});
    states[37] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-41,38,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[38] = new State(new int[]{44,39,54,-134,55,-134,19,-134,20,-134,56,-134,42,-134,36,-134,40,-134,37,-134,33,-134});
    states[39] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-42,40,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[40] = new State(new int[]{17,41,18,64,44,-136,54,-136,55,-136,19,-136,20,-136,56,-136,42,-136,36,-136,40,-136,37,-136,33,-136});
    states[41] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-43,42,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[42] = new State(new int[]{53,43,52,66,15,89,16,138,17,-138,18,-138,44,-138,54,-138,55,-138,19,-138,20,-138,56,-138,42,-138,36,-138,40,-138,37,-138,33,-138});
    states[43] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-44,44,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[44] = new State(new int[]{13,45,14,68,53,-141,52,-141,15,-141,16,-141,17,-141,18,-141,44,-141,54,-141,55,-141,19,-141,20,-141,56,-141,42,-141,36,-141,40,-141,37,-141,33,-141});
    states[45] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-45,46,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[46] = new State(new int[]{48,47,47,70,13,-146,14,-146,53,-146,52,-146,15,-146,16,-146,17,-146,18,-146,44,-146,54,-146,55,-146,19,-146,20,-146,56,-146,42,-146,36,-146,40,-146,37,-146,33,-146});
    states[47] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-46,48,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[48] = new State(new int[]{49,49,50,72,51,93,48,-149,47,-149,13,-149,14,-149,53,-149,52,-149,15,-149,16,-149,17,-149,18,-149,44,-149,54,-149,55,-149,19,-149,20,-149,56,-149,42,-149,36,-149,40,-149,37,-149,33,-149});
    states[49] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-36,50,-31,51,-34,52,-38,74,-35,97});
    states[50] = new State(-152);
    states[51] = new State(-123);
    states[52] = new State(new int[]{41,53,39,140,11,147,12,148,49,-90,50,-90,51,-90,48,-90,47,-90,13,-90,14,-90,53,-90,52,-90,15,-90,16,-90,17,-90,18,-90,44,-90,54,-90,55,-90,19,-90,20,-90,56,-90,42,-90,36,-90,40,-90,37,-90,33,-90,29,-90,38,-90,21,-90,22,-90,23,-90,24,-90,25,-90,26,-90,27,-90,28,-90,30,-90,31,-90});
    states[53] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,54,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[54] = new State(new int[]{42,55,36,56});
    states[55] = new State(-112);
    states[56] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-23,57,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[57] = new State(-72);
    states[58] = new State(-66);
    states[59] = new State(new int[]{19,33,20,-69,56,-69,42,-69,36,-69,40,-69,37,-69,33,-69});
    states[60] = new State(new int[]{55,35,19,-109,20,-109,56,-109,42,-109,36,-109,40,-109,37,-109,33,-109});
    states[61] = new State(new int[]{54,37,55,-129,19,-129,20,-129,56,-129,42,-129,36,-129,40,-129,37,-129,33,-129});
    states[62] = new State(new int[]{44,39,54,-133,55,-133,19,-133,20,-133,56,-133,42,-133,36,-133,40,-133,37,-133,33,-133});
    states[63] = new State(new int[]{17,41,18,64,44,-135,54,-135,55,-135,19,-135,20,-135,56,-135,42,-135,36,-135,40,-135,37,-135,33,-135});
    states[64] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-43,65,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[65] = new State(new int[]{53,43,52,66,15,89,16,138,17,-139,18,-139,44,-139,54,-139,55,-139,19,-139,20,-139,56,-139,42,-139,36,-139,40,-139,37,-139,33,-139});
    states[66] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-44,67,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[67] = new State(new int[]{13,45,14,68,53,-142,52,-142,15,-142,16,-142,17,-142,18,-142,44,-142,54,-142,55,-142,19,-142,20,-142,56,-142,42,-142,36,-142,40,-142,37,-142,33,-142});
    states[68] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-45,69,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[69] = new State(new int[]{48,47,47,70,13,-147,14,-147,53,-147,52,-147,15,-147,16,-147,17,-147,18,-147,44,-147,54,-147,55,-147,19,-147,20,-147,56,-147,42,-147,36,-147,40,-147,37,-147,33,-147});
    states[70] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-46,71,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[71] = new State(new int[]{49,49,50,72,51,93,48,-150,47,-150,13,-150,14,-150,53,-150,52,-150,15,-150,16,-150,17,-150,18,-150,44,-150,54,-150,55,-150,19,-150,20,-150,56,-150,42,-150,36,-150,40,-150,37,-150,33,-150});
    states[72] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-36,73,-31,51,-34,52,-38,74,-35,97});
    states[73] = new State(-153);
    states[74] = new State(-111);
    states[75] = new State(-125);
    states[76] = new State(-126);
    states[77] = new State(-127);
    states[78] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,68,110,62,111,63,112,64,113,65,114,66,115},new int[]{-25,79,-12,81,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[79] = new State(new int[]{40,80,36,56});
    states[80] = new State(-128);
    states[81] = new State(new int[]{40,82});
    states[82] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-36,83,-31,51,-34,52,-38,74,-35,97});
    states[83] = new State(-124);
    states[84] = new State(new int[]{4,75,5,76,6,77,39,86,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-31,85,-34,52,-38,74,-35,97});
    states[85] = new State(-91);
    states[86] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,79,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[87] = new State(-71);
    states[88] = new State(new int[]{53,43,52,66,15,89,16,138,17,-137,18,-137,44,-137,54,-137,55,-137,19,-137,20,-137,56,-137,42,-137,36,-137,40,-137,37,-137,33,-137});
    states[89] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-44,90,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[90] = new State(new int[]{13,45,14,68,53,-143,52,-143,15,-143,16,-143,17,-143,18,-143,44,-143,54,-143,55,-143,19,-143,20,-143,56,-143,42,-143,36,-143,40,-143,37,-143,33,-143});
    states[91] = new State(new int[]{48,47,47,70,13,-145,14,-145,53,-145,52,-145,15,-145,16,-145,17,-145,18,-145,44,-145,54,-145,55,-145,19,-145,20,-145,56,-145,42,-145,36,-145,40,-145,37,-145,33,-145});
    states[92] = new State(new int[]{49,49,50,72,51,93,48,-148,47,-148,13,-148,14,-148,53,-148,52,-148,15,-148,16,-148,17,-148,18,-148,44,-148,54,-148,55,-148,19,-148,20,-148,56,-148,42,-148,36,-148,40,-148,37,-148,33,-148});
    states[93] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-36,94,-31,51,-34,52,-38,74,-35,97});
    states[94] = new State(-154);
    states[95] = new State(new int[]{4,75,5,76,6,77,39,86,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-31,96,-34,52,-38,74,-35,97});
    states[96] = new State(-92);
    states[97] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-36,98,-31,51,-34,52,-38,74,-35,97});
    states[98] = new State(-93);
    states[99] = new State(-117);
    states[100] = new State(-118);
    states[101] = new State(-119);
    states[102] = new State(-120);
    states[103] = new State(-121);
    states[104] = new State(-122);
    states[105] = new State(new int[]{39,107,4,75,5,76,6,77,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-31,106,-34,52,-38,74,-35,97});
    states[106] = new State(-94);
    states[107] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-12,108,-25,79,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[108] = new State(new int[]{40,109});
    states[109] = new State(-95);
    states[110] = new State(-37);
    states[111] = new State(-38);
    states[112] = new State(-39);
    states[113] = new State(-40);
    states[114] = new State(-41);
    states[115] = new State(-42);
    states[116] = new State(new int[]{13,45,14,68,53,-140,52,-140,15,-140,16,-140,17,-140,18,-140,44,-140,54,-140,55,-140,19,-140,20,-140,56,-140,42,-140,36,-140,40,-140,37,-140,33,-140});
    states[117] = new State(-151);
    states[118] = new State(new int[]{29,125,38,127,21,128,22,129,23,130,24,131,25,132,26,133,27,134,28,135,30,136,31,137,49,-123,50,-123,51,-123,48,-123,47,-123,13,-123,14,-123,53,-123,52,-123,15,-123,16,-123,17,-123,18,-123,44,-123,54,-123,55,-123,19,-123,20,-123,56,-123,42,-123,36,-123,40,-123,37,-123,33,-123},new int[]{-32,119});
    states[119] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-23,120,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[120] = new State(-67);
    states[121] = new State(new int[]{4,75,5,76,6,77,39,86,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-31,122,-34,52,-38,74,-35,97});
    states[122] = new State(-96);
    states[123] = new State(new int[]{4,75,5,76,6,77,39,86,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-31,124,-34,52,-38,74,-35,97});
    states[124] = new State(-97);
    states[125] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-23,126,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[126] = new State(-68);
    states[127] = new State(-98);
    states[128] = new State(-99);
    states[129] = new State(-100);
    states[130] = new State(-101);
    states[131] = new State(-102);
    states[132] = new State(-103);
    states[133] = new State(-104);
    states[134] = new State(-105);
    states[135] = new State(-106);
    states[136] = new State(-107);
    states[137] = new State(-108);
    states[138] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-44,139,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[139] = new State(new int[]{13,45,14,68,53,-144,52,-144,15,-144,16,-144,17,-144,18,-144,44,-144,54,-144,55,-144,19,-144,20,-144,56,-144,42,-144,36,-144,40,-144,37,-144,33,-144});
    states[140] = new State(new int[]{40,141,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-39,142,-23,146,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[141] = new State(-113);
    states[142] = new State(new int[]{40,143,36,144});
    states[143] = new State(-114);
    states[144] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-23,145,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[145] = new State(-132);
    states[146] = new State(-131);
    states[147] = new State(-115);
    states[148] = new State(-116);
    states[149] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,150,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[150] = new State(new int[]{37,151,36,56});
    states[151] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-21,152,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[152] = new State(-59);
    states[153] = new State(-23);
    states[154] = new State(new int[]{4,153,39,154},new int[]{-9,155});
    states[155] = new State(new int[]{40,156,39,19,41,26});
    states[156] = new State(-24);
    states[157] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,33,-17,4,-17,39,-17,40,-17,36,-17},new int[]{-7,158,-12,157,-13,159});
    states[158] = new State(-18);
    states[159] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,33,-19,4,-19,39,-19,40,-19,36,-19},new int[]{-7,160,-12,157,-13,159});
    states[160] = new State(-20);
    states[161] = new State(-43);
    states[162] = new State(-44);
    states[163] = new State(-45);
    states[164] = new State(new int[]{40,165,36,166});
    states[165] = new State(-26);
    states[166] = new State(new int[]{4,167});
    states[167] = new State(-51);
    states[168] = new State(-27);
    states[169] = new State(-48);
    states[170] = new State(-50);
    states[171] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-19,172,-23,173,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[172] = new State(-47);
    states[173] = new State(-55);
    states[174] = new State(-21);
    states[175] = new State(new int[]{35,176,4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,254,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-18,177,-10,248,-22,253,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227,-5,256,-7,12,-12,157,-13,159});
    states[176] = new State(-33);
    states[177] = new State(new int[]{35,178,4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,179,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[178] = new State(-34);
    states[179] = new State(-54);
    states[180] = new State(-60);
    states[181] = new State(new int[]{37,182,41,-125,39,-125,11,-125,12,-125,29,-125,38,-125,21,-125,22,-125,23,-125,24,-125,25,-125,26,-125,27,-125,28,-125,30,-125,31,-125,49,-125,50,-125,51,-125,48,-125,47,-125,13,-125,14,-125,53,-125,52,-125,15,-125,16,-125,17,-125,18,-125,44,-125,54,-125,55,-125,19,-125,20,-125,56,-125,33,-125,36,-125});
    states[182] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,183,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[183] = new State(-73);
    states[184] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-17,185,-21,29,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,51,-34,52,-38,74,-35,97});
    states[185] = new State(new int[]{37,186});
    states[186] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,187,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[187] = new State(-74);
    states[188] = new State(new int[]{37,189});
    states[189] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,190,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[190] = new State(-75);
    states[191] = new State(-61);
    states[192] = new State(-76);
    states[193] = new State(new int[]{33,194,36,56});
    states[194] = new State(-77);
    states[195] = new State(-62);
    states[196] = new State(new int[]{39,197});
    states[197] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,198,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[198] = new State(new int[]{40,199,36,56});
    states[199] = new State(new int[]{34,175},new int[]{-11,200});
    states[200] = new State(new int[]{78,201,35,-78,4,-78,74,-78,75,-78,33,-78,5,-78,6,-78,39,-78,11,-78,12,-78,44,-78,49,-78,48,-78,47,-78,46,-78,45,-78,7,-78,8,-78,9,-78,77,-78,79,-78,80,-78,81,-78,82,-78,83,-78,84,-78,85,-78,86,-78,2,-78});
    states[201] = new State(new int[]{34,175},new int[]{-11,202});
    states[202] = new State(-79);
    states[203] = new State(new int[]{39,204});
    states[204] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,205,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[205] = new State(new int[]{40,206,36,56});
    states[206] = new State(new int[]{34,175},new int[]{-11,207});
    states[207] = new State(-80);
    states[208] = new State(-63);
    states[209] = new State(new int[]{39,210});
    states[210] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,211,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[211] = new State(new int[]{40,212,36,56});
    states[212] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,213,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[213] = new State(-81);
    states[214] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,215,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[215] = new State(new int[]{80,216});
    states[216] = new State(new int[]{39,217});
    states[217] = new State(new int[]{4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,218,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[218] = new State(new int[]{40,219,36,56});
    states[219] = new State(new int[]{33,220});
    states[220] = new State(-82);
    states[221] = new State(new int[]{39,222});
    states[222] = new State(new int[]{33,192,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-27,223,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[223] = new State(new int[]{33,192,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-27,224,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[224] = new State(new int[]{40,225,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,245,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[225] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,226,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[226] = new State(-83);
    states[227] = new State(-64);
    states[228] = new State(new int[]{4,229});
    states[229] = new State(new int[]{33,230});
    states[230] = new State(-85);
    states[231] = new State(new int[]{33,232});
    states[232] = new State(-86);
    states[233] = new State(new int[]{33,234});
    states[234] = new State(-87);
    states[235] = new State(new int[]{33,236,4,75,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123},new int[]{-25,237,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97});
    states[236] = new State(-88);
    states[237] = new State(new int[]{33,238,36,56});
    states[238] = new State(-89);
    states[239] = new State(new int[]{33,241,40,242,34,243,35,244},new int[]{-6,240});
    states[240] = new State(-65);
    states[241] = new State(-13);
    states[242] = new State(-14);
    states[243] = new State(-15);
    states[244] = new State(-16);
    states[245] = new State(new int[]{40,246,36,56});
    states[246] = new State(new int[]{4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,247,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[247] = new State(-84);
    states[248] = new State(new int[]{35,249,2,252,4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-18,250,-5,9,-22,253,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227,-7,12,-12,157,-13,159});
    states[249] = new State(-35);
    states[250] = new State(new int[]{35,251,4,181,74,184,75,188,33,192,5,76,6,77,39,78,11,84,12,95,44,99,49,100,48,101,47,102,46,103,45,104,7,105,8,121,9,123,77,196,79,203,80,209,81,214,82,221,83,228,84,231,85,233,86,235,2,239},new int[]{-22,179,-26,180,-27,191,-25,193,-23,87,-21,58,-24,30,-33,59,-37,60,-40,61,-41,62,-42,63,-43,88,-44,116,-45,91,-46,92,-36,117,-31,118,-34,52,-38,74,-35,97,-28,195,-29,208,-30,227});
    states[251] = new State(-36);
    states[252] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,33,241,40,242,34,243,35,244},new int[]{-5,11,-6,240,-7,12,-12,157,-13,159});
    states[253] = new State(-53);
    states[254] = new State(new int[]{33,241,40,242,34,243,35,244,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-6,240,-5,255,-7,12,-12,157,-13,159});
    states[255] = new State(-31);
    states[256] = new State(-29);
    states[257] = new State(-10);
    states[258] = new State(new int[]{68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-5,255,-7,12,-12,157,-13,159});
    states[259] = new State(new int[]{39,19,41,26,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163,2,258,34,175},new int[]{-10,260,-11,262,-5,256,-7,12,-12,157,-13,159});
    states[260] = new State(new int[]{2,10,34,175,68,110,62,111,63,112,64,113,65,114,66,115,67,161,69,162,76,163},new int[]{-11,261,-5,9,-7,12,-12,157,-13,159});
    states[261] = new State(-11);
    states[262] = new State(-12);
    states[263] = new State(-5);
    states[264] = new State(new int[]{33,241,40,242,34,243,35,244},new int[]{-6,265});
    states[265] = new State(-6);
    states[266] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-1, new int[]{-1,-3});
    rules[4] = new Rule(-3, new int[]{-4});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{2,-6});
    rules[7] = new Rule(-5, new int[]{-7,33});
    rules[8] = new Rule(-5, new int[]{-7,-8,33});
    rules[9] = new Rule(-4, new int[]{-7,-9,-10,-11});
    rules[10] = new Rule(-4, new int[]{-7,-9,-11});
    rules[11] = new Rule(-4, new int[]{-9,-10,-11});
    rules[12] = new Rule(-4, new int[]{-9,-11});
    rules[13] = new Rule(-6, new int[]{33});
    rules[14] = new Rule(-6, new int[]{40});
    rules[15] = new Rule(-6, new int[]{34});
    rules[16] = new Rule(-6, new int[]{35});
    rules[17] = new Rule(-7, new int[]{-12});
    rules[18] = new Rule(-7, new int[]{-12,-7});
    rules[19] = new Rule(-7, new int[]{-13});
    rules[20] = new Rule(-7, new int[]{-13,-7});
    rules[21] = new Rule(-8, new int[]{-14});
    rules[22] = new Rule(-8, new int[]{-8,36,-14});
    rules[23] = new Rule(-9, new int[]{4});
    rules[24] = new Rule(-9, new int[]{39,-9,40});
    rules[25] = new Rule(-9, new int[]{-9,39,-15,40});
    rules[26] = new Rule(-9, new int[]{-9,39,-16,40});
    rules[27] = new Rule(-9, new int[]{-9,39,40});
    rules[28] = new Rule(-9, new int[]{-9,41,-17,42});
    rules[29] = new Rule(-10, new int[]{-5});
    rules[30] = new Rule(-10, new int[]{-10,-5});
    rules[31] = new Rule(-10, new int[]{2,-5});
    rules[32] = new Rule(-10, new int[]{-10,2,-5});
    rules[33] = new Rule(-11, new int[]{34,35});
    rules[34] = new Rule(-11, new int[]{34,-18,35});
    rules[35] = new Rule(-11, new int[]{34,-10,35});
    rules[36] = new Rule(-11, new int[]{34,-10,-18,35});
    rules[37] = new Rule(-12, new int[]{68});
    rules[38] = new Rule(-12, new int[]{62});
    rules[39] = new Rule(-12, new int[]{63});
    rules[40] = new Rule(-12, new int[]{64});
    rules[41] = new Rule(-12, new int[]{65});
    rules[42] = new Rule(-12, new int[]{66});
    rules[43] = new Rule(-13, new int[]{67});
    rules[44] = new Rule(-13, new int[]{69});
    rules[45] = new Rule(-13, new int[]{76});
    rules[46] = new Rule(-14, new int[]{-9});
    rules[47] = new Rule(-14, new int[]{-9,38,-19});
    rules[48] = new Rule(-15, new int[]{-20});
    rules[49] = new Rule(-15, new int[]{-15,36,-20});
    rules[50] = new Rule(-16, new int[]{4});
    rules[51] = new Rule(-16, new int[]{-16,36,4});
    rules[52] = new Rule(-17, new int[]{-21});
    rules[53] = new Rule(-18, new int[]{-22});
    rules[54] = new Rule(-18, new int[]{-18,-22});
    rules[55] = new Rule(-19, new int[]{-23});
    rules[56] = new Rule(-20, new int[]{-7,-9});
    rules[57] = new Rule(-20, new int[]{-7});
    rules[58] = new Rule(-21, new int[]{-24});
    rules[59] = new Rule(-21, new int[]{-24,56,-25,37,-21});
    rules[60] = new Rule(-22, new int[]{-26});
    rules[61] = new Rule(-22, new int[]{-27});
    rules[62] = new Rule(-22, new int[]{-28});
    rules[63] = new Rule(-22, new int[]{-29});
    rules[64] = new Rule(-22, new int[]{-30});
    rules[65] = new Rule(-22, new int[]{2,-6});
    rules[66] = new Rule(-23, new int[]{-21});
    rules[67] = new Rule(-23, new int[]{-31,-32,-23});
    rules[68] = new Rule(-23, new int[]{-31,29,-23});
    rules[69] = new Rule(-24, new int[]{-33});
    rules[70] = new Rule(-24, new int[]{-24,20,-33});
    rules[71] = new Rule(-25, new int[]{-23});
    rules[72] = new Rule(-25, new int[]{-25,36,-23});
    rules[73] = new Rule(-26, new int[]{4,37,-22});
    rules[74] = new Rule(-26, new int[]{74,-17,37,-22});
    rules[75] = new Rule(-26, new int[]{75,37,-22});
    rules[76] = new Rule(-27, new int[]{33});
    rules[77] = new Rule(-27, new int[]{-25,33});
    rules[78] = new Rule(-28, new int[]{77,39,-25,40,-11});
    rules[79] = new Rule(-28, new int[]{77,39,-25,40,-11,78,-11});
    rules[80] = new Rule(-28, new int[]{79,39,-25,40,-11});
    rules[81] = new Rule(-29, new int[]{80,39,-25,40,-22});
    rules[82] = new Rule(-29, new int[]{81,-22,80,39,-25,40,33});
    rules[83] = new Rule(-29, new int[]{82,39,-27,-27,40,-22});
    rules[84] = new Rule(-29, new int[]{82,39,-27,-27,-25,40,-22});
    rules[85] = new Rule(-30, new int[]{83,4,33});
    rules[86] = new Rule(-30, new int[]{84,33});
    rules[87] = new Rule(-30, new int[]{85,33});
    rules[88] = new Rule(-30, new int[]{86,33});
    rules[89] = new Rule(-30, new int[]{86,-25,33});
    rules[90] = new Rule(-31, new int[]{-34});
    rules[91] = new Rule(-31, new int[]{11,-31});
    rules[92] = new Rule(-31, new int[]{12,-31});
    rules[93] = new Rule(-31, new int[]{-35,-36});
    rules[94] = new Rule(-31, new int[]{7,-31});
    rules[95] = new Rule(-31, new int[]{7,39,-12,40});
    rules[96] = new Rule(-31, new int[]{8,-31});
    rules[97] = new Rule(-31, new int[]{9,-31});
    rules[98] = new Rule(-32, new int[]{38});
    rules[99] = new Rule(-32, new int[]{21});
    rules[100] = new Rule(-32, new int[]{22});
    rules[101] = new Rule(-32, new int[]{23});
    rules[102] = new Rule(-32, new int[]{24});
    rules[103] = new Rule(-32, new int[]{25});
    rules[104] = new Rule(-32, new int[]{26});
    rules[105] = new Rule(-32, new int[]{27});
    rules[106] = new Rule(-32, new int[]{28});
    rules[107] = new Rule(-32, new int[]{30});
    rules[108] = new Rule(-32, new int[]{31});
    rules[109] = new Rule(-33, new int[]{-37});
    rules[110] = new Rule(-33, new int[]{-33,19,-37});
    rules[111] = new Rule(-34, new int[]{-38});
    rules[112] = new Rule(-34, new int[]{-34,41,-25,42});
    rules[113] = new Rule(-34, new int[]{-34,39,40});
    rules[114] = new Rule(-34, new int[]{-34,39,-39,40});
    rules[115] = new Rule(-34, new int[]{-34,11});
    rules[116] = new Rule(-34, new int[]{-34,12});
    rules[117] = new Rule(-35, new int[]{44});
    rules[118] = new Rule(-35, new int[]{49});
    rules[119] = new Rule(-35, new int[]{48});
    rules[120] = new Rule(-35, new int[]{47});
    rules[121] = new Rule(-35, new int[]{46});
    rules[122] = new Rule(-35, new int[]{45});
    rules[123] = new Rule(-36, new int[]{-31});
    rules[124] = new Rule(-36, new int[]{39,-12,40,-36});
    rules[125] = new Rule(-38, new int[]{4});
    rules[126] = new Rule(-38, new int[]{5});
    rules[127] = new Rule(-38, new int[]{6});
    rules[128] = new Rule(-38, new int[]{39,-25,40});
    rules[129] = new Rule(-37, new int[]{-40});
    rules[130] = new Rule(-37, new int[]{-37,55,-40});
    rules[131] = new Rule(-39, new int[]{-23});
    rules[132] = new Rule(-39, new int[]{-39,36,-23});
    rules[133] = new Rule(-40, new int[]{-41});
    rules[134] = new Rule(-40, new int[]{-40,54,-41});
    rules[135] = new Rule(-41, new int[]{-42});
    rules[136] = new Rule(-41, new int[]{-41,44,-42});
    rules[137] = new Rule(-42, new int[]{-43});
    rules[138] = new Rule(-42, new int[]{-42,17,-43});
    rules[139] = new Rule(-42, new int[]{-42,18,-43});
    rules[140] = new Rule(-43, new int[]{-44});
    rules[141] = new Rule(-43, new int[]{-43,53,-44});
    rules[142] = new Rule(-43, new int[]{-43,52,-44});
    rules[143] = new Rule(-43, new int[]{-43,15,-44});
    rules[144] = new Rule(-43, new int[]{-43,16,-44});
    rules[145] = new Rule(-44, new int[]{-45});
    rules[146] = new Rule(-44, new int[]{-44,13,-45});
    rules[147] = new Rule(-44, new int[]{-44,14,-45});
    rules[148] = new Rule(-45, new int[]{-46});
    rules[149] = new Rule(-45, new int[]{-45,48,-46});
    rules[150] = new Rule(-45, new int[]{-45,47,-46});
    rules[151] = new Rule(-46, new int[]{-36});
    rules[152] = new Rule(-46, new int[]{-46,49,-36});
    rules[153] = new Rule(-46, new int[]{-46,50,-36});
    rules[154] = new Rule(-46, new int[]{-46,51,-36});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // translation_unit -> external_declaration
{ CurrentSemanticValue = new TranslationUnitSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 3: // translation_unit -> translation_unit, external_declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                   SyntaxTree.Instance.setRoot(CurrentSemanticValue); }
        break;
      case 4: // external_declaration -> function_definition
{ CurrentSemanticValue = new ExternalDeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 5: // external_declaration -> declaration
{ CurrentSemanticValue = new ExternalDeclarationSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 6: // external_declaration -> error, error_end
{ CurrentSemanticValue = new ExternalDeclarationSTN(3, n_linecnt); this.yyerrok(); }
        break;
      case 7: // declaration -> declaration_specifiers, C_SC
{ CurrentSemanticValue = new DeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }    ); }
        break;
      case 8: // declaration -> declaration_specifiers, init_declarator_list, C_SC
{ CurrentSemanticValue = new DeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 9: // function_definition -> declaration_specifiers, direct_declarator, 
              //                        declaration_list, compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 10: // function_definition -> declaration_specifiers, direct_declarator, 
               //                        compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 11: // function_definition -> direct_declarator, declaration_list, compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 12: // function_definition -> direct_declarator, compound_statement
{ CurrentSemanticValue = new FunctionDefinitionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 13: // error_end -> C_SC
{ ; }
        break;
      case 14: // error_end -> C_CP
{ ; }
        break;
      case 15: // error_end -> C_OK
{ ; }
        break;
      case 16: // error_end -> C_CK
{ ; }
        break;
      case 17: // declaration_specifiers -> type_specifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 18: // declaration_specifiers -> type_specifier, declaration_specifiers
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 19: // declaration_specifiers -> type_qualifier
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 20: // declaration_specifiers -> type_qualifier, declaration_specifiers
{ CurrentSemanticValue = new DeclarationSpecifiersSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 21: // init_declarator_list -> init_declarator
{ CurrentSemanticValue = new InitDeclaratorListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 22: // init_declarator_list -> init_declarator_list, C_CM, init_declarator
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                      }
        break;
      case 23: // direct_declarator -> IDENTIFIER
{ CurrentSemanticValue = new DirectDeclaratorSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) });                                  }
        break;
      case 24: // direct_declarator -> C_OP, direct_declarator, C_CP
{ CurrentSemanticValue = new DirectDeclaratorSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3]                              }); }
        break;
      case 25: // direct_declarator -> direct_declarator, C_OP, parameter_list, C_CP
{ CurrentSemanticValue = new DirectDeclaratorSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]                          }); }
        break;
      case 26: // direct_declarator -> direct_declarator, C_OP, identifier_list, C_CP
{ CurrentSemanticValue = new DirectDeclaratorSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]                          }); }
        break;
      case 27: // direct_declarator -> direct_declarator, C_OP, C_CP
{ CurrentSemanticValue = new DirectDeclaratorSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3]                              }); }
        break;
      case 28: // direct_declarator -> direct_declarator, C_OB, constant_expression, C_CB
{ CurrentSemanticValue = new DirectDeclaratorSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]                          }); }
        break;
      case 29: // declaration_list -> declaration
{ CurrentSemanticValue = new DeclarationListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 30: // declaration_list -> declaration_list, declaration
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                   }
        break;
      case 31: // declaration_list -> error, declaration
{ CurrentSemanticValue = new DeclarationListSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 32: // declaration_list -> declaration_list, error, declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                   }
        break;
      case 33: // compound_statement -> C_OK, C_CK
{ CurrentSemanticValue = new CompoundStatementSTN(1, n_linecnt);                                  }
        break;
      case 34: // compound_statement -> C_OK, statement_list, C_CK
{ CurrentSemanticValue = new CompoundStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 35: // compound_statement -> C_OK, declaration_list, C_CK
{ CurrentSemanticValue = new CompoundStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] });     }
        break;
      case 36: // compound_statement -> C_OK, declaration_list, statement_list, C_CK
{ CurrentSemanticValue = new CompoundStatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 37: // type_specifier -> VOID
{ CurrentSemanticValue = new TypeSpecifierSTN(1, n_linecnt); }
        break;
      case 38: // type_specifier -> BYTE
{ CurrentSemanticValue = new TypeSpecifierSTN(2, n_linecnt); }
        break;
      case 39: // type_specifier -> WORD
{ CurrentSemanticValue = new TypeSpecifierSTN(3, n_linecnt); }
        break;
      case 40: // type_specifier -> LONGWORD
{ CurrentSemanticValue = new TypeSpecifierSTN(4, n_linecnt); }
        break;
      case 41: // type_specifier -> SIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(5, n_linecnt); }
        break;
      case 42: // type_specifier -> UNSIGNED
{ CurrentSemanticValue = new TypeSpecifierSTN(6, n_linecnt); }
        break;
      case 43: // type_qualifier -> CONST
{ CurrentSemanticValue = new TypeQualifierSTN(1, n_linecnt); }
        break;
      case 44: // type_qualifier -> VOLATILE
{ CurrentSemanticValue = new TypeQualifierSTN(2, n_linecnt); }
        break;
      case 45: // type_qualifier -> INTERRUPT
{ CurrentSemanticValue = new TypeQualifierSTN(3, n_linecnt); }
        break;
      case 46: // init_declarator -> direct_declarator
{ CurrentSemanticValue = new InitDeclaratorSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 47: // init_declarator -> direct_declarator, C_ES, initializer
{ CurrentSemanticValue = new InitDeclaratorSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 48: // parameter_list -> parameter_declaration
{ CurrentSemanticValue = new ParameterListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 49: // parameter_list -> parameter_list, C_CM, parameter_declaration
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                 }
        break;
      case 50: // identifier_list -> IDENTIFIER
{ CurrentSemanticValue = new IdentifierListSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); }
        break;
      case 51: // identifier_list -> identifier_list, C_CM, IDENTIFIER
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                  }
        break;
      case 52: // constant_expression -> conditional_expression
{ CurrentSemanticValue = new ConstantExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 53: // statement_list -> statement
{ CurrentSemanticValue = new StatementListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 54: // statement_list -> statement_list, statement
{ ValueStack[ValueStack.Depth-2].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-2];                 }
        break;
      case 55: // initializer -> assignment_expression
{ CurrentSemanticValue = new InitializerSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 56: // parameter_declaration -> declaration_specifiers, direct_declarator
{ CurrentSemanticValue = new ParameterDeclarationSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 57: // parameter_declaration -> declaration_specifiers
{ CurrentSemanticValue = new ParameterDeclarationSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 58: // conditional_expression -> logical_or_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 59: // conditional_expression -> logical_or_expression, C_QM, expression, C_DP, 
               //                           conditional_expression
{ CurrentSemanticValue = new ConditionalExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 60: // statement -> labeled_statement
{ CurrentSemanticValue = new StatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 61: // statement -> expression_statement
{ CurrentSemanticValue = new StatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 62: // statement -> selection_statement
{ CurrentSemanticValue = new StatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 63: // statement -> iteration_statement
{ CurrentSemanticValue = new StatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 64: // statement -> jump_statement
{ CurrentSemanticValue = new StatementSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 65: // statement -> error, error_end
{ CurrentSemanticValue = new StatementSTN(6, n_linecnt, new SyntaxTreeNode[] {    }); }
        break;
      case 66: // assignment_expression -> conditional_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 67: // assignment_expression -> unary_expression, assignment_operator, 
               //                          assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 68: // assignment_expression -> unary_expression, LEFT_ARROW, assignment_expression
{ CurrentSemanticValue = new AssignmentExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 69: // logical_or_expression -> logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 70: // logical_or_expression -> logical_or_expression, OR_OP, logical_and_expression
{ CurrentSemanticValue = new LogicalOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 71: // expression -> assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 72: // expression -> expression, C_CM, assignment_expression
{ CurrentSemanticValue = new ExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 73: // labeled_statement -> IDENTIFIER, C_DP, statement
{ CurrentSemanticValue = new LabeledStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt), ValueStack[ValueStack.Depth-1] }); }
        break;
      case 74: // labeled_statement -> CASE, constant_expression, C_DP, statement
{ CurrentSemanticValue = new LabeledStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]                              }); }
        break;
      case 75: // labeled_statement -> DEFAULT, C_DP, statement
{ CurrentSemanticValue = new LabeledStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]                                  }); }
        break;
      case 76: // expression_statement -> C_SC
{ CurrentSemanticValue = new ExpressionStatementSTN(1, n_linecnt);                              }
        break;
      case 77: // expression_statement -> expression, C_SC
{ CurrentSemanticValue = new ExpressionStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2] }); }
        break;
      case 78: // selection_statement -> IF, C_OP, expression, C_CP, compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 79: // selection_statement -> IF, C_OP, expression, C_CP, compound_statement, ELSE, 
               //                        compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 80: // selection_statement -> SWITCH, C_OP, expression, C_CP, compound_statement
{ CurrentSemanticValue = new SelectionStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 81: // iteration_statement -> WHILE, C_OP, expression, C_CP, statement
{ CurrentSemanticValue = new IterationStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]         }); }
        break;
      case 82: // iteration_statement -> DO, statement, WHILE, C_OP, expression, C_CP, C_SC
{ CurrentSemanticValue = new IterationStatementSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-3]         }); }
        break;
      case 83: // iteration_statement -> FOR, C_OP, expression_statement, expression_statement, 
               //                        C_CP, statement
{ CurrentSemanticValue = new IterationStatementSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 84: // iteration_statement -> FOR, C_OP, expression_statement, expression_statement, 
               //                        expression, C_CP, statement
{ CurrentSemanticValue = new IterationStatementSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 85: // jump_statement -> GOTO, IDENTIFIER, C_SC
{ CurrentSemanticValue = new JumpStatementSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt) }); }
        break;
      case 86: // jump_statement -> CONTINUE, C_SC
{ CurrentSemanticValue = new JumpStatementSTN(3, n_linecnt);                                                           }
        break;
      case 87: // jump_statement -> BREAK, C_SC
{ CurrentSemanticValue = new JumpStatementSTN(4, n_linecnt);                                                           }
        break;
      case 88: // jump_statement -> RETURN, C_SC
{ CurrentSemanticValue = new JumpStatementSTN(5, n_linecnt);                                                           }
        break;
      case 89: // jump_statement -> RETURN, expression, C_SC
{ CurrentSemanticValue = new JumpStatementSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                              }); }
        break;
      case 90: // unary_expression -> postfix_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 91: // unary_expression -> INC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 92: // unary_expression -> DEC_OP, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 93: // unary_expression -> unary_operator, cast_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 94: // unary_expression -> SIZEOF, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 95: // unary_expression -> SIZEOF, C_OP, type_specifier, C_CP
{ CurrentSemanticValue = new UnaryExpressionSTN(6, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 96: // unary_expression -> LOBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(7, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 97: // unary_expression -> HIBYTE, unary_expression
{ CurrentSemanticValue = new UnaryExpressionSTN(8, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 98: // assignment_operator -> C_ES
{ CurrentSemanticValue = new AssignmentOperatorSTN( 1, n_linecnt); }
        break;
      case 99: // assignment_operator -> MUL_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 2, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 100: // assignment_operator -> DIV_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 3, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 101: // assignment_operator -> MOD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 4, n_linecnt); /* Not supported by 6502 */ }
        break;
      case 102: // assignment_operator -> ADD_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 5, n_linecnt); }
        break;
      case 103: // assignment_operator -> SUB_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 6, n_linecnt); }
        break;
      case 104: // assignment_operator -> LEFT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 7, n_linecnt); }
        break;
      case 105: // assignment_operator -> RIGHT_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 8, n_linecnt); }
        break;
      case 106: // assignment_operator -> AND_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN( 9, n_linecnt); }
        break;
      case 107: // assignment_operator -> XOR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(10, n_linecnt); }
        break;
      case 108: // assignment_operator -> OR_ASSIGN
{ CurrentSemanticValue = new AssignmentOperatorSTN(11, n_linecnt); }
        break;
      case 109: // logical_and_expression -> inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 110: // logical_and_expression -> logical_and_expression, AND_OP, 
                //                           inclusive_or_expression
{ CurrentSemanticValue = new LogicalAndExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 111: // postfix_expression -> primary_expression
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 112: // postfix_expression -> postfix_expression, C_OB, expression, C_CB
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 113: // postfix_expression -> postfix_expression, C_OP, C_CP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3]     }); }
        break;
      case 114: // postfix_expression -> postfix_expression, C_OP, argument_expression_list, C_CP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2] }); }
        break;
      case 115: // postfix_expression -> postfix_expression, INC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 116: // postfix_expression -> postfix_expression, DEC_OP
{ CurrentSemanticValue = new PostfixExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]     }); }
        break;
      case 117: // unary_operator -> C_A
{ CurrentSemanticValue = new UnaryOperatorSTN(1, n_linecnt); }
        break;
      case 118: // unary_operator -> C_AK
{ CurrentSemanticValue = new UnaryOperatorSTN(2, n_linecnt); }
        break;
      case 119: // unary_operator -> C_PS
{ CurrentSemanticValue = new UnaryOperatorSTN(3, n_linecnt); }
        break;
      case 120: // unary_operator -> C_MS
{ CurrentSemanticValue = new UnaryOperatorSTN(4, n_linecnt); }
        break;
      case 121: // unary_operator -> C_NS
{ CurrentSemanticValue = new UnaryOperatorSTN(5, n_linecnt); }
        break;
      case 122: // unary_operator -> C_EM
{ CurrentSemanticValue = new UnaryOperatorSTN(6, n_linecnt); }
        break;
      case 123: // cast_expression -> unary_expression
{ CurrentSemanticValue = new CastExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 124: // cast_expression -> C_OP, type_specifier, C_CP, cast_expression
{ CurrentSemanticValue = new CastExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 125: // primary_expression -> IDENTIFIER
{ CurrentSemanticValue = new PrimaryExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { new IdentifierSTL(1, n_linecnt)    }); }
        break;
      case 126: // primary_expression -> NUMBER_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { new NumberLiteralSTL(1, n_linecnt) }); }
        break;
      case 127: // primary_expression -> STRING_LITERAL
{ CurrentSemanticValue = new PrimaryExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { new StringLiteralSTL(1, n_linecnt) }); }
        break;
      case 128: // primary_expression -> C_OP, expression, C_CP
{ CurrentSemanticValue = new PrimaryExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-2]                                 }); }
        break;
      case 129: // inclusive_or_expression -> exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 130: // inclusive_or_expression -> inclusive_or_expression, C_PP, 
                //                            exclusive_or_expression
{ CurrentSemanticValue = new InclusiveOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 131: // argument_expression_list -> assignment_expression
{ CurrentSemanticValue = new ArgumentExpressionListSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); }
        break;
      case 132: // argument_expression_list -> argument_expression_list, C_CM, 
                //                             assignment_expression
{ ValueStack[ValueStack.Depth-3].addChildren(new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1] }); CurrentSemanticValue = ValueStack[ValueStack.Depth-3];                          }
        break;
      case 133: // exclusive_or_expression -> and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 134: // exclusive_or_expression -> exclusive_or_expression, C_UA, and_expression
{ CurrentSemanticValue = new ExclusiveOrExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 135: // and_expression -> equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 136: // and_expression -> and_expression, C_A, equality_expression
{ CurrentSemanticValue = new AndExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 137: // equality_expression -> relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 138: // equality_expression -> equality_expression, EQ_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 139: // equality_expression -> equality_expression, NE_OP, relational_expression
{ CurrentSemanticValue = new EqualityExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 140: // relational_expression -> shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 141: // relational_expression -> relational_expression, C_GT, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 142: // relational_expression -> relational_expression, C_LT, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 143: // relational_expression -> relational_expression, LE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 144: // relational_expression -> relational_expression, GE_OP, shift_expression
{ CurrentSemanticValue = new RelationalExpressionSTN(5, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 145: // shift_expression -> additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 146: // shift_expression -> shift_expression, LEFT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 147: // shift_expression -> shift_expression, RIGHT_OP, additive_expression
{ CurrentSemanticValue = new ShiftExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 148: // additive_expression -> multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     }); }
        break;
      case 149: // additive_expression -> additive_expression, C_PS, multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 150: // additive_expression -> additive_expression, C_MS, multiplicative_expression
{ CurrentSemanticValue = new AdditiveExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); }
        break;
      case 151: // multiplicative_expression -> cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(1, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-1]     });                             }
        break;
      case 152: // multiplicative_expression -> multiplicative_expression, C_AK, cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(2, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
      case 153: // multiplicative_expression -> multiplicative_expression, C_SS, cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(3, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
      case 154: // multiplicative_expression -> multiplicative_expression, C_PC, cast_expression
{ CurrentSemanticValue = new MultiplicativeExpressionSTN(4, n_linecnt, new SyntaxTreeNode[] { ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1] }); /* Not supported by 6502 */ }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


// No argument CTOR. By deafult Parser's ctor requires scanner as param.
public Parser(Scanner scn) : base(scn) { }
}
}
